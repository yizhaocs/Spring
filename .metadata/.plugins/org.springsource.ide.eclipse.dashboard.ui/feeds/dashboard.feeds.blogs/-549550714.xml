<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Spring</title>
  <link rel="alternate" href="https://spring.io/blog" />
  <link rel="self" href="https://spring.io/blog.atom" />
  <id>http://spring.io/blog.atom</id>
  <icon>https://spring.io/favicon.ico</icon>
  <updated>2015-02-24T23:25:00Z</updated>
  <entry>
    <title>This Week in Spring - February 24th, 2015</title>
    <link rel="alternate" href="https://spring.io/blog/2015/02/24/this-week-in-spring-february-24th-2015" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2015-02-24:1990</id>
    <updated>2015-02-24T23:25:00Z</updated>
    <content type="html">&lt;p&gt;Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! We&amp;rsquo;ve got a &lt;em&gt;lot&lt;/em&gt; to cover so let&amp;rsquo;s get to it!&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Our pal Adam Koblentz (from ZeroTurnaround) put up this &lt;a href="https://www.voxxed.com/blog/2015/02/no-snail-herding-websocket-addition-jrebel-spring-boot/"&gt;great post introducing building a websocket application with Spring Boot and JRebel&lt;/a&gt;. Check it out!&lt;/li&gt;
  &lt;li&gt;Check out this replay of Mark Fisher, Dr. Mark Pollack, and Sabby Anandan&amp;rsquo;s webinar &lt;a href="http://spring.io/blog/2015/02/20/webinar-replay-spring-xd-a-platform-for-data-at-scale-and-developer-productivity"&gt;introducing Spring XD - A Platform for data at scale and developer productivity&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;A huge part of the Pivotal Data Suite, of course, is Spring XD. Last week I surfaced some of the amazing Spring XD wiki content on &lt;a href="http://spring.io/blog/2015/02/20/stream-processing-in-spring-xd-1-1"&gt;the new stream processing supports in Spring XD 1.1&lt;/a&gt;. Check out &lt;a href="https://github.com/spring-projects/spring-xd/wiki/Creating-a-Data-Stream-Processor-Module#reactor-streams"&gt;the Wiki page&lt;/a&gt; for a more detailed look by Spring XD ninja Ilayaperumal Gopinathan.&lt;/li&gt;
  &lt;li&gt;Spring Cloud co-lead Spencer Gibb has been improving the Spring Cloud Netflix integration. Check out this example &lt;a href="https://github.com/spencergibb/myfeed/blob/master/myfeed-ui/src/main/java/myfeed/ui/UiController.java#L38-L57"&gt;demonstrating using RxJava&amp;rsquo;s &lt;code&gt;Observable&amp;lt;T&amp;gt;&lt;/code&gt; return-values from Spring MVC&lt;/a&gt;. &lt;a href="https://github.com/spencergibb/myfeed/commit/a301aba6139fce7a87a1aab1d1311e6ceb8adfb7"&gt;Here are the changes&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;March Webinars are here, and it&amp;rsquo;s packed with Javascript, Spring Boot and Spring Cloud.&lt;br/&gt;This killer lineup starts with Dr. Dave Syer&amp;rsquo;s epic VII part blog series on Angular - lightweight API gateway - Spring Security - made into a &lt;a href="https://spring.io/blog/2015/02/24/webinar-a-single-page-application-with-spring-security-and-angular-js"&gt;webinar on March 10th&lt;/a&gt;. Then Scott Deeg will examine the same thing, except with Google&amp;rsquo;s Polymer on the frontend, &lt;a href="https://spring.io/blog/2015/02/24/webinar-building-a-secure-polymer-app-with-spring-backend"&gt;on a webinar March 24th&lt;/a&gt;. Lastly, Julien Dubois will introduce the AngularJS+Boot application generator, JHipster on &lt;a href="https://spring.io/blog/2015/02/24/webinar-jhipster-for-spring-boot"&gt;March 17th, 2015&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Alvin Reyes&amp;rsquo;s posts introducing how to configure Apache Tomcat&amp;rsquo;s &lt;a href="http://examples.javacodegeeks.com/enterprise-java/tomcat/tomcat-server-xml-configuration-example/"&gt;&lt;code&gt;server.xml&lt;/code&gt;&lt;/a&gt; and &lt;a href="http://examples.javacodegeeks.com/enterprise-java/tomcat/tomcat-users-xml-configuration-example"&gt;&lt;code&gt;users.xml&lt;/code&gt;&lt;/a&gt; are &lt;em&gt;wonderful&lt;/em&gt; resources.&lt;/li&gt;
  &lt;li&gt;Reactor project-lead Jon Brisbin has &lt;a href="http://spring.io/blog/2015/02/18/reactor-2-0-0-rc1-with-native-reactive-streams-support-now-available"&gt;just announced Reactor RC1&lt;/a&gt;!&lt;/li&gt;
  &lt;li&gt;Spring ninja St√©phane Nicoll has just announced &lt;a href="http://spring.io/blog/2015/02/20/spring-framework-4-1-5-released"&gt;the Spring framework maintenance release, 4.1.5&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Last week, we at Pivotal announced some big changes; we&amp;rsquo;ve open-sourced our Pivotal Data Suite! Check out this &lt;a href="http://www.infoq.com/news/2015/02/pivotal-big-data-suite"&gt;InfoQ post on the subject&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring IO Platform lead Andy Wilkinson has just released improved support for &lt;a href="http://spring.io/blog/2015/02/23/better-dependency-management-for-gradle"&gt;Maven Bill-of-Material dependency management using Gradle &lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Eclipse foundation member John Arthorne and Spring Tool Suite lead Martin Lippert&amp;rsquo;s talk, &lt;a href="https://old.parleys.com/share_channel.html#play/543f97d7e4b08dc7823e54cc"&gt;Eclipse IDE to the Cloud-Based Era of Developer Tooling&lt;/a&gt; from JavaOne 2014 is available online and well worth a watch!&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://sdtimes.com/pivotal-pivots-open-source/"&gt;The SD Times article on the open-sourcing of the Pivotal Data Suite&lt;/a&gt; is worth a read, too.&lt;/li&gt;
  &lt;li&gt;Not related but still awesome: &lt;a href="http://sdtimes.com/http2-specification-formally-approved/"&gt;HTTP2 is now a thing&lt;/a&gt;!&lt;/li&gt;
  &lt;li&gt;Check out Rick Hightower&amp;rsquo;s post on &lt;a href="http://rick-hightower.blogspot.com/2015/02/using-qbit-java-microservice-lib-with.html"&gt;using the QBit framework with Spring Boot&lt;/a&gt;. Interesting..&lt;/li&gt;
  &lt;li&gt;Hubert Klein Ikkink put together a quick look &lt;a href="http://java.dzone.com/articles/spocklight-capture-and-assert"&gt;at using Spring Boot&amp;rsquo;s &lt;code&gt;OutputCapture&lt;/code&gt; JUnit &lt;code&gt;@Rule&lt;/code&gt; in a Spock test&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Our pal Eugen Paraschiv put together a great look &lt;a href="http://www.baeldung.com/spring-jdbc-jdbctemplate"&gt;at using the venerable &lt;code&gt;JdbcTemplate&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Disid&amp;rsquo;s Enrique Ruiz put together &lt;a href="http://spring.io/blog/2015/02/19/working-with-spring-roo-from-spring-tool-suite-sts"&gt;a nice post on using Spring Roo from STS&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Check out this week&amp;rsquo;s SpringOne2GX 2014 replays:&lt;br/&gt;&lt;a href="https://spring.io/blog/2015/02/23/springone2gx-2014-replay-panel-session-real-world-boot-up-sequences"&gt;SpringOne2GX 2014 Replay: Panel Session: Real World Boot-up sequences&lt;/a&gt;&lt;br/&gt;&lt;a href="http://spring.io/blog/2015/02/24/springone2gx-2014-replay-spring-data-rest-data-meets-hypermedia"&gt;SpringOne2GX 2014 Replay: Spring Data REST - Data Meets Hypermedia&lt;/a&gt;&lt;br/&gt;&lt;a href="http://spring.io/blog/2015/02/23/springone2gx-replay-spring-batch-performance-tuning"&gt;SpringOne2GX Replay: Spring Batch Performance Tuning&lt;/a&gt;&lt;br/&gt;&lt;a href="https://spring.io/blog/2015/02/23/springone2gx-2014-replay-artistic-spring-data-neo4j-3-x-with-spring-boot"&gt;SpringOne2GX 2014 Replay: Artistic Spring Data Neo4j 3.x with Spring Boot&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content>
  </entry>
  <entry>
    <title>Webinar: Building a secure Polymer app with Spring backend</title>
    <link rel="alternate" href="https://spring.io/blog/2015/02/24/webinar-building-a-secure-polymer-app-with-spring-backend" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-02-25:1993</id>
    <updated>2015-02-24T23:16:00Z</updated>
    <content type="html">&lt;p&gt;Speaker: Scott Deeg &lt;/p&gt;
&lt;p&gt;Polymer is the latest web framework out of Google. Designed completely around the emerging Web Components standards, it has the lofty goal of making it easy to build apps based on these low level primitives. Along with Polymer comes a new set of Elements (buttons, dialog boxes and such) based on the ideas of &amp;quot;Material Design&amp;quot;. These technologies together make it easy to build responsive, componentized &amp;quot;Single Page&amp;quot; web applications that work for browsers on PCs or mobile devices. But what about the backend, and how do we make these apps secure? In this talk Scott Deeg will take you through an introduction to Polmyer and its related technologies, and then through the build out of a full blown cloud based app with a secure, RESTful backend based on Spring REST, Spring Cloud, and Spring Security and using Thymeleaf for backend rendering jobs. At the end he will show the principles applied in a tool he's currently building. The talk will be mainly code walk through and demo, and assumes familiarity with Java/Spring and JavaScript.&lt;/p&gt;&lt;p&gt;Tuesday, March 24th, 2015 2:00PM GMT (London GMT) &lt;a href="http://connect.pivotal.io/OSS_Webinar_7AMBuildingasecurePolymerappwithSpringbackend_Register.html"&gt;Register&lt;/a&gt;&lt;br/&gt;&lt;p&gt;Tuesday, March 24th, 2015 10:00AM PDT (San Francisco GMT-07:00) &lt;a href="http://connect.pivotal.io/OSS_Webinar_10AMBuildingasecurePolymerappwithSpringbackend_Register.html"&gt;Register&lt;/a&gt;&lt;/p&gt;&lt;br/&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Webinar: JHipster for Spring Boot</title>
    <link rel="alternate" href="https://spring.io/blog/2015/02/24/webinar-jhipster-for-spring-boot" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-02-25:1992</id>
    <updated>2015-02-24T23:12:00Z</updated>
    <content type="html">&lt;p&gt;Speaker: Julien Dubois &lt;/p&gt;
&lt;p&gt;JHipster focuses on generating a high quality application with a Java back-end using an extensive set of Spring technologies; Spring Boot, Spring Security, Spring Data, Spring MVC (providing a framework for websockets, REST and MVC), etc. an Angular.js front-end and a suite of pre-configured development tools like Yeoman, Maven, Gradle, Grunt, Gulp.js and Bower. JHipster creates a fully configured Spring Boot application with a set of pre-defined screens for user management, monitoring, and logging. The generated Spring Boot application is specifically tailored to make working with Angular.js a smoother experience. Join Julien for a quick-live coding session to build a simple application, and deploy it to Cloud Foundry.&lt;/p&gt;&lt;p&gt;Tuesday, March 17th, 2015 2:00PM GMT (London GMT) &lt;a href="http://connect.pivotal.io/OSS_Webinar_7AMJHipster_Register.html"&gt;Register&lt;/a&gt;&lt;br/&gt;&lt;p&gt;Tuesday, March 17th, 2015 10:00AM PDT (San Francisco GMT-07:00) &lt;a href="http://connect.pivotal.io/OSS_Webinar_10AMJHipster_Register.html"&gt;Register&lt;/a&gt;&lt;/p&gt;&lt;br/&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Webinar: A Single-Page Application with Spring Security and Angular JS</title>
    <link rel="alternate" href="https://spring.io/blog/2015/02/24/webinar-a-single-page-application-with-spring-security-and-angular-js" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-02-25:1991</id>
    <updated>2015-02-24T23:06:00Z</updated>
    <content type="html">&lt;p&gt;Speaker: David Syer&lt;/p&gt;
&lt;p&gt; Pivotal Spring Security, Spring Boot and Angular JS all have nice features for making it really easy to produce modern applications, so there is potentially a lot of value in making them work together very smoothly. Things to consider are cookies, headers, native clients, various security vulnerabilities and how modern browser technology can help us to avoid them. In this session we show how nice features of the component frameworks can be integrated simply to provide a pleasant and secure user experience. We start with a very basic single-server implementation and scale it up in stages, splitting out backend resources and authentication to separate services. The final state includes a simple API Gateway on the front end implemented declaratively using Spring Cloud, and using this we are able to neatly sidestep a lot of the problems people encounter securing a javascript front end with a distributed back end.&lt;/p&gt;&lt;p&gt;Tuesday, March 10th, 2015 2:00PM GMT (London GMT)&lt;a href="http://connect.pivotal.io/OSS_Webinar_7AMSinglePageApp-SpringSecurity-AngularJS_Register.html"&gt;Register&lt;/a&gt;&lt;br/&gt;&lt;p&gt;Tuesday, March 10th, 2015 10:00AM PDT (San Francisco GMT-07:00) &lt;a href="http://connect.pivotal.io/OSS_Webinar_10AMSinglePageApp-SpringSecurity-AngularJS_Register.html"&gt;Register&lt;/a&gt;&lt;/p&gt;&lt;br/&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt;&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2014 Replay: Spring Data REST - Data Meets Hypermedia</title>
    <link rel="alternate" href="https://spring.io/blog/2015/02/24/springone2gx-2014-replay-spring-data-rest-data-meets-hypermedia" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-02-25:1995</id>
    <updated>2015-02-24T13:46:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2014 &lt;/p&gt;
&lt;p&gt;Speakers: Roy Clarkson, Greg Turnquist &lt;/p&gt;
&lt;p&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/spring-one2gx-2014widedatameetshypermedia"&gt;http://www.slideshare.net/SpringCentral/spring-one2gx-2014widedatameetshypermedia &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Spring Data REST bridges the gap between the convenient data access layers provided by Spring Data's repository abstraction and hypermedia-driven REST web services, effectively taking out the boilerplate needed during implementation. This talk will give a quick overview of the project, explain fundamental design decisions and introduce new features of the latest version (namely service documentation and discoverability). We will then look at the Spring-A-Gram sample application (built using Spring Data REST), focusing on the implementation of the frontend bits and pieces.&lt;/p&gt;
&lt;p&gt; Learn more about Spring Boot at &lt;a href="http://projects.spring.io/spring-boot"&gt;http://projects.spring.io/spring-boot&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&#xD;
  &lt;iframe width="560" height="315" src="https://www.youtube.com/embed/APk8OWtXM2s" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&#xD;
&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX Replay: Spring Batch Performance Tuning</title>
    <link rel="alternate" href="https://spring.io/blog/2015/02/23/springone2gx-replay-spring-batch-performance-tuning" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-02-25:1997</id>
    <updated>2015-02-23T13:51:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2014. &lt;/p&gt;
&lt;p&gt;Speakers: Gunnar Hillert, Chris Schaefer Slides: Data / Integration Track &lt;/p&gt;
&lt;p&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/spring-batch-performance-tuning"&gt;http://www.slideshare.net/SpringCentral/spring-batch-performance-tuning &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this presentation we will examine various scalability options in order to improve the robustness and performance of your Spring Batch applications. We start out with a single threaded Spring Batch application that we will refactor so we can demonstrate how to run it using: * Concurrent Steps * Remote Chunking * AsyncItemProcessor and AsyncItemWriter * Remote Partitioning Additionally, we will show how you can deploy Spring Batch applications to Spring XD which provides high availability and failover capabilities. Spring XD also allows you to integrate Spring Batch applications with other Big Data processing needs.&lt;a href="http://projects.spring.io/spring-boot"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&#xD;
  &lt;iframe width="560" height="315" src="https://www.youtube.com/embed/4unuv-oKkCA" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&#xD;
&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2014 Replay: Panel Session: Real World Boot-up sequences</title>
    <link rel="alternate" href="https://spring.io/blog/2015/02/23/springone2gx-2014-replay-panel-session-real-world-boot-up-sequences" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-02-25:1994</id>
    <updated>2015-02-23T13:50:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2014. &lt;/p&gt;
&lt;p&gt;Speakers: Erdem Gunay, Turkcell - Tim Hobson, Intuit - Zach Lendon, Independent &lt;/p&gt;
&lt;p&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/spring-one2gx-2014wideerdemgunay-41125935"&gt;http://www.slideshare.net/SpringCentral/spring-one2gx-2014wideerdemgunay-41125935&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Core Spring Track &lt;/p&gt;
&lt;p&gt;In this Panel session, each of these presenters will have 20 minutes to respond to the question: tell us about your experiences with Spring Boot? Following that is about 30 minutes of moderated panel discussion. Erdem Gunay from Turkcell will present his experience of re-writing a Mobile BaaS originally written with Spring 3.x. He wrote the service from scratch using Boot in one week, integrating spring security, elasticsearch, mongodb, camel, angular.js, for the win: 40x throughput, 100% availability - zero crashes, 3x the users - used on 300k mobile devices. Tim Hobson from Intuit will present his lessons learned from using with Boot - he will take you through what configuration was necessary, what needed to be built, and how the project leveraged Boot to minimize cross-cutting code and configuration, maximize testability, and focus on the application domain. Zach will present a view of Boot from the hospitality industry, where they are using JAX-RS, DropWizard, and Spring Boot to create micro-service applications. He will help you understand which dropwizard-spring integrations work, and which one's don't, what to watch out for, and how to integrate your Spring applications into dropwizard whether you configure your Spring applications with xml, annotations, and/or java config files.&lt;/p&gt;
&lt;p&gt; Learn more about Spring Boot at &lt;a href="http://projects.spring.io/spring-boot"&gt;http://projects.spring.io/spring-boot&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&#xD;
  &lt;iframe width="560" height="315" src="https://www.youtube.com/embed/K4JcX8NnaAg" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&#xD;
&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2014 Replay: Artistic Spring Data Neo4j 3.x with Spring Boot</title>
    <link rel="alternate" href="https://spring.io/blog/2015/02/23/springone2gx-2014-replay-artistic-spring-data-neo4j-3-x-with-spring-boot" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-02-25:1996</id>
    <updated>2015-02-23T13:47:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2014. &lt;/p&gt;
&lt;p&gt;Speakers: Michael Hunger, Lorenzo Speranzoni - Neo Technology &lt;/p&gt;
&lt;p&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/artistic-spring-data-neo4j-3x-with-spring-boot-and-van-gogh"&gt;http://www.slideshare.net/SpringCentral/artistic-spring-data-neo4j-3x-with-spring-boot-and-van-gogh &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This session will show, how easy it is to get started with Spring Data Neo4j using Spring Boot. After a quick introduction of the concepts behind the Neo4j NoSQL graph database and its Spring Data integration library, we will discuss the general approach used in Spring Data Neo4j and highlight the exciting, new features of the new 3.x releases which now works with the most recent Neo4j 2.x versions. During the session we'll demonstrate the development steps of an exciting and unusual application - tracking an famous' artists journey connecting him to the places, paintings, people and other aspects that influenced him. Having this data in a graph allows us to find new insights and conclusions as well as quickly adding different aspects to it. This application will use Spring Boot and Spring Data Neo4j to get started quickly. We import the data, look at it as a graph visualization and then build a web-application using Spring Boot's supporting infrastructure. As a final step we show how evolving this application from being a just Neo4j client application to a REST extension of the Neo4j server requires only a few steps and can leverage Spring Data REST to provide the neccessary endpoints for consumers.&lt;/p&gt;
&lt;p&gt; Learn more about Spring Boot at &lt;a href="http://projects.spring.io/spring-boot"&gt;http://projects.spring.io/spring-boot&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&#xD;
  &lt;iframe width="560" height="315" src="https://www.youtube.com/embed/byp1zz-NqiE" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&#xD;
&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Better dependency management for Gradle</title>
    <link rel="alternate" href="https://spring.io/blog/2015/02/23/better-dependency-management-for-gradle" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Andy Wilkinson</name>
    </author>
    <id>tag:spring.io,2015-02-19:1982</id>
    <updated>2015-02-23T13:44:00Z</updated>
    <content type="html">&lt;p&gt;Maven&amp;rsquo;s &lt;a href="http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html"&gt;dependency management&lt;/a&gt; includes the concept of a bill-of-materials (bom). A bom is a special kind of pom that is used to control the versions of a project&amp;rsquo;s dependencies and provides a central place to define and update those versions.&lt;/p&gt;&lt;p&gt;A number of Spring projects including Spring Framework, Spring Cloud, Spring Boot, and the Spring IO Platform provide boms to make things easier for Maven users. Unfortunately, things haven&amp;rsquo;t been quite so easy if you&amp;rsquo;re using Gradle.&lt;/p&gt;&lt;h2&gt;&lt;a href="#dependency-management-in-gradle" class="anchor" name="dependency-management-in-gradle"&gt;&lt;/a&gt;Dependency management in Gradle&lt;/h2&gt;&lt;p&gt;&lt;a href="https://gradle.org/docs/current/userguide/dependency_management.html"&gt;Gradle&amp;rsquo;s dependency management&lt;/a&gt; uses a &lt;a href="https://gradle.org/docs/current/dsl/org.gradle.api.artifacts.ResolutionStrategy.html"&gt;&lt;code&gt;ResolutionStrategy&lt;/code&gt;&lt;/a&gt; to take control of a project&amp;rsquo;s dependency versions. This offers a lot of power and flexibility but doesn&amp;rsquo;t provide a way to reuse the dependency management that&amp;rsquo;s already been declared in a Maven bom. As a result, you have to do so manually. Depending on the bom, this can easily equate to tens of additional lines in your &lt;code&gt;build.gradle&lt;/code&gt; script just to reuse some existing configuration.&lt;/p&gt;&lt;h2&gt;&lt;a href="#reusing-a-bom-in-gradle" class="anchor" name="reusing-a-bom-in-gradle"&gt;&lt;/a&gt;Reusing a bom in Gradle&lt;/h2&gt;&lt;p&gt;One of Gradle&amp;rsquo;s key strengths is that it can be easily extended and its behaviour customized through the use of plugins. We&amp;rsquo;ve taken advantage of this and written a &lt;a href="https://plugins.gradle.org/plugin/io.spring.dependency-management"&gt;dependency management plugin for Gradle&lt;/a&gt;. It&amp;rsquo;s compatible with both Gradle 1.x and 2.x. This plugin allows you to use a Maven bom to control your build&amp;rsquo;s dependencies in a handful of lines. The first step is to apply the plugin. In Gradle 2.1 and later:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint groovy"&gt;plugins {&#xD;
  id &amp;quot;io.spring.dependency-management&amp;quot; version &amp;quot;0.4.0.RELEASE&amp;quot;&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In earlier versions of Gradle it&amp;rsquo;s a little more verbose:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint groovy"&gt;buildscript {&#xD;
  repositories {&#xD;
    jcenter()&#xD;
  }&#xD;
  dependencies {&#xD;
    classpath &amp;quot;io.spring.gradle:dependency-management-plugin:0.4.0.RELEASE&amp;quot;&#xD;
  }&#xD;
}&#xD;
&#xD;
apply plugin: &amp;quot;io.spring.dependency-management&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once the plugin&amp;rsquo;s been applied you can use it to import a Maven bom:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint groovy"&gt;dependencyManagement {&#xD;
  imports {&#xD;
    mavenBom &amp;#39;io.spring.platform:platform-bom:1.1.1.RELEASE&amp;#39;&#xD;
  }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With this configuration in place you can declare dependencies on anything in the bom without specifying a version:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint groovy"&gt;dependencies {&#xD;
    compile &amp;#39;org.springframework:spring-core&amp;#39;&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The imported bom will control the version of the dependency. It will also control the version of its transitive dependencies if they&amp;rsquo;re listed in the bom.&lt;/p&gt;&lt;h2&gt;&lt;a href="#exclusions-in-gradle" class="anchor" name="exclusions-in-gradle"&gt;&lt;/a&gt;Exclusions in Gradle&lt;/h2&gt;&lt;p&gt;Gradle can retrieve dependencies from a Maven repository and it uses the metadata in Maven pom files to do so. However, rather than obeying Maven&amp;rsquo;s rules, it applies its own, subtly different semantics to the metadata. One area where this can cause problems is with the exclusion of transitive dependencies. This is best illustrated with a simple example.&lt;/p&gt;&lt;p&gt;Imagine a module that depends on a couple of Spring Framework modules,&lt;code&gt;spring-core&lt;/code&gt; and &lt;code&gt;spring-beans&lt;/code&gt;, and that uses SLF4J rather than Commons Logging. The dependencies in its pom would look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint xml"&gt;&amp;lt;dependency&amp;gt;&#xD;
  &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;&#xD;
  &amp;lt;artifactId&amp;gt;spring-core&amp;lt;/artifactId&amp;gt;&#xD;
  &amp;lt;version&amp;gt;4.1.4.RELEASE&amp;lt;/version&amp;gt;&#xD;
  &amp;lt;exclusions&amp;gt;&#xD;
    &amp;lt;exclusion&amp;gt;&#xD;
      &amp;lt;groupId&amp;gt;commons-logging&amp;lt;/groupId&amp;gt;&#xD;
      &amp;lt;artifactId&amp;gt;commons-logging&amp;lt;/artifactId&amp;gt;&#xD;
    &amp;lt;/exclusion&amp;gt;&#xD;
  &amp;lt;/exclusions&amp;gt;&#xD;
&amp;lt;/dependency&amp;gt;&#xD;
&amp;lt;dependency&amp;gt;&#xD;
  &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;&#xD;
  &amp;lt;artifactId&amp;gt;spring-beans&amp;lt;/artifactId&amp;gt;&#xD;
  &amp;lt;version&amp;gt;4.1.4.RELEASE&amp;lt;/version&amp;gt;&#xD;
&amp;lt;/dependency&amp;gt;&#xD;
&amp;lt;dependency&amp;gt;&#xD;
  &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt;&#xD;
  &amp;lt;artifactId&amp;gt;jcl-over-slf4j&amp;lt;/artifactId&amp;gt;&#xD;
  &amp;lt;version&amp;gt;1.7.10&amp;lt;/version&amp;gt;&#xD;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If a Maven build depends on this module its dependency tree will look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;\- com.example:my-library:jar:0.0.1-SNAPSHOT:compile&#xD;
   +- org.springframework:spring-core:jar:4.1.4.RELEASE:compile&#xD;
   +- org.springframework:spring-beans:jar:4.1.4.RELEASE:compile&#xD;
   \- org.slf4j:jcl-over-slf4j:jar:1.7.10:compile&#xD;
      \- org.slf4j:slf4j-api:jar:1.7.10:compile
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;commons-logging&lt;/code&gt; isn&amp;rsquo;t listed as the only module that depends upon it is &lt;code&gt;spring-core&lt;/code&gt; where it has been excluded.&lt;/p&gt;&lt;p&gt;The dependency tree of the equivalent Gradle build looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;\--- com.example:my-library:0.0.1-SNAPSHOT&#xD;
     +--- org.springframework:spring-core:4.1.4.RELEASE&#xD;
     |    \--- commons-logging:commons-logging:1.2&#xD;
     +--- org.springframework:spring-beans:4.1.4.RELEASE&#xD;
     |    \--- org.springframework:spring-core:4.1.4.RELEASE (*)&#xD;
     \--- org.slf4j:jcl-over-slf4j:1.7.10&#xD;
          \--- org.slf4j:slf4j-api:1.7.10
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Despite the exclusion, &lt;code&gt;commons-logging&lt;/code&gt; is listed this time. This can be problematic as it leaves your classpath polluted with dependencies that should not be there. You can work around the problem by manually configuring the required exclusions in your Gradle build, but first of all you have to know what the exclusions should be, and then you have to go through the tedious and error-prone process of configuring them.&lt;/p&gt;&lt;h2&gt;&lt;a href="#honoring-a-pom-rsquo-s-exclusions" class="anchor" name="honoring-a-pom-rsquo-s-exclusions"&gt;&lt;/a&gt;Honoring a pom&amp;rsquo;s exclusions&lt;/h2&gt;&lt;p&gt;The dependency management plugin changes Gradle&amp;rsquo;s handling of a pom&amp;rsquo;s exclusions so that they behave as they do in Maven. With the plugin applied to the example project, it no longer pulls in &lt;code&gt;commons-logging&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;\--- com.example:my-library:0.0.1-SNAPSHOT&#xD;
     +--- org.springframework:spring-core:4.1.4.RELEASE&#xD;
     +--- org.springframework:spring-beans:4.1.4.RELEASE&#xD;
     |    \--- org.springframework:spring-core:4.1.4.RELEASE&#xD;
     \--- org.slf4j:jcl-over-slf4j:1.7.10&#xD;
          \--- org.slf4j:slf4j-api:1.7.10
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a href="#using-the-plugin-with-spring-boot" class="anchor" name="using-the-plugin-with-spring-boot"&gt;&lt;/a&gt;Using the plugin with Spring Boot&lt;/h2&gt;&lt;p&gt;There are some similarities between this plugin and Spring Boot&amp;rsquo;s Gradle plugin. For example, the Spring Boot plugin also &lt;a href="http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#build-tool-plugins-gradle-dependencies-without-versions"&gt;allows dependencies to be declared without a version&lt;/a&gt;, however it doesn&amp;rsquo;t affect transitive dependencies and doesn&amp;rsquo;t honor Maven exclusions. In Spring Boot 1.3 we intend to &lt;a href="https://github.com/spring-projects/spring-boot/issues/2133"&gt;remove Boot&amp;rsquo;s own dependency management and to start using the dependency management plugin instead&lt;/a&gt;. In the meantime, the two plugins will happily co-exist and you can configure the dependency management plugin to use Spring Boot&amp;rsquo;s starter bom:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint groovy"&gt;buildscript {&#xD;
  repositories {&#xD;
    jcenter()&#xD;
  }&#xD;
  dependencies {&#xD;
    classpath &amp;quot;io.spring.gradle:dependency-management-plugin:0.4.0.RELEASE&amp;quot;&#xD;
    classpath &amp;quot;org.springframework.boot:spring-boot-gradle-plugin:1.2.1.RELEASE&amp;quot;&#xD;
  }&#xD;
}&#xD;
&#xD;
apply plugin: &amp;quot;io.spring.dependency-management&amp;quot;&#xD;
apply plugin: &amp;quot;spring-boot&amp;quot;&#xD;
&#xD;
repositories {&#xD;
  jcenter()&#xD;
}&#xD;
&#xD;
dependencyManagement {&#xD;
  imports {&#xD;
    mavenBom &amp;#39;org.springframework.boot:spring-boot-starter-parent:1.2.1.RELEASE&amp;#39;&#xD;
  }&#xD;
}&#xD;
&#xD;
dependencies {&#xD;
  compile &amp;quot;org.springframework.boot:spring-boot-starter-web&amp;quot;&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a href="#learning-more" class="anchor" name="learning-more"&gt;&lt;/a&gt;Learning more&lt;/h2&gt;&lt;p&gt;In addition to the features described above, the plugin has support for working with a bom&amp;rsquo;s properties (both overriding them and using them in your Gradle build), automatically including dependency management metadata in Gradle-generated pom files, and more. Take a look at the &lt;a href="https://github.com/spring-gradle-plugins/dependency-management-plugin/blob/master/README.md"&gt;README&lt;/a&gt; for further details.&lt;/p&gt;&lt;p&gt;The plugin is Apache-licensed and is on &lt;a href="https://github.com/spring-gradle-plugins/dependency-management-plugin"&gt;GitHub&lt;/a&gt;. GitHub&amp;rsquo;s also used for &lt;a href="https://github.com/spring-gradle-plugins/dependency-management-plugin/issues"&gt;issue tracking&lt;/a&gt;. Feature suggestions, pull requests, and bug reports are always welcome.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Stream Processing in Spring XD 1.1</title>
    <link rel="alternate" href="https://spring.io/blog/2015/02/20/stream-processing-in-spring-xd-1-1" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2015-02-20:1987</id>
    <updated>2015-02-20T22:17:06Z</updated>
    <content type="html">&lt;blockquote&gt;&lt;p&gt;This tip is drawn heavily from this Wiki-page on &lt;a href="https://github.com/spring-projects/spring-xd/wiki/Creating-a-Data-Stream-Processor-Module#reactor-streams"&gt;Spring XD&amp;rsquo;s streaming support&lt;/a&gt; by various Spring XD team-members, and particularly the amazing &lt;a href="https://github.com/ilayaperumalg"&gt;Ilayaperumal Gopinathan&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Spring XD 1.1 is here and is &lt;em&gt;packed&lt;/em&gt; with lots of new features. One theme for this release is rich stream processing support. Spring XD 1.1 provides integration with &lt;a href="https://github.com/reactor"&gt;Project Reactor&lt;/a&gt; &lt;a href="https://github.com/reactor/reactor/blob/master/reactor-core/src/main/java/reactor/rx/Stream.java"&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt;s, &lt;a href="https://github.com/ReactiveX/"&gt;RxJava&lt;/a&gt; &lt;a href="https://github.com/ReactiveX/RxJava/wiki/Observable"&gt;&lt;code&gt;Observable&lt;/code&gt;&lt;/a&gt;s, and &lt;a href="https://spark.apache.org/"&gt;Spark&lt;/a&gt;&amp;rsquo;s streaming.&lt;/p&gt;&lt;p&gt;Let&amp;rsquo;s look specifically at using Reactor, though the concepts are similar across all of the supported streaming APIs.&lt;/p&gt;&lt;p&gt;Messages that are delivered on the Message Bus are accessed from the input Stream. The return value is the output Stream that is the result of applying various operations to the input stream. The content of the output Stream is sent to the message bus for consumption by other processors or sinks. To implement a &lt;code&gt;Stream&lt;/code&gt;-based processor module you need to implement the interface &lt;code&gt;org.springframework.xd.reactor.Processor&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;import org.springframework.xd.reactor.Processor;&#xD;
import org.springframework.xd.tuple.Tuple;&#xD;
import reactor.rx.Stream;&#xD;
&#xD;
import static com.acme.Math.avg;&#xD;
import static org.springframework.xd.tuple.TupleBuilder.tuple;&#xD;
&#xD;
public class MovingAverage implements Processor&amp;lt;Tuple, Tuple&amp;gt; {&#xD;
&#xD;
  @Override&#xD;
  public Stream&amp;lt;Tuple&amp;gt; process(Stream&amp;lt;Tuple&amp;gt; inputStream) {&#xD;
    return inputStream.map(tuple -&amp;gt; tuple.getDouble(&amp;quot;measurement&amp;quot;))&#xD;
      .buffer(5)&#xD;
      .map(data -&amp;gt; tuple().of(&amp;quot;average&amp;quot;, avg(data)));&#xD;
  }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Writing a test for this is as simple as setting up a Spring Integration flow that takes input on a request channel and routes it to this processor via a &lt;code&gt;org.springframework.xd.reactor.SynchronousDispatcherMessageHandler&lt;/code&gt; component which itself writes its output to an output channel. From there, you can &lt;a href="https://github.com/spring-projects/spring-xd/wiki/Modules#module-packaging"&gt;package&lt;/a&gt; and &lt;a href="https://github.com/spring-projects/spring-xd/wiki/Creating-a-Processor-Module#register-the-module"&gt;register&lt;/a&gt; the custom processor in the Spring XD admin server.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Framework 4.1.5 released</title>
    <link rel="alternate" href="https://spring.io/blog/2015/02/20/spring-framework-4-1-5-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>St√©phane Nicoll</name>
    </author>
    <id>tag:spring.io,2015-02-20:1984</id>
    <updated>2015-02-20T13:04:00Z</updated>
    <content type="html">&lt;p&gt;It‚Äôs my pleasure to announce that Spring Framework 4.1.5 has been released and is available now from &lt;a href="http://repo.spring.io/release"&gt;repo.spring.io&lt;/a&gt; and Maven Central.&lt;/p&gt;&lt;p&gt;This maintenance release includes &lt;a href="https://jira.spring.io/secure/ReleaseNote.jspa?projectId=10000&amp;version=14861"&gt;49 fixes and enhancements&lt;/a&gt; from 4.1.4 and is a strongly recommended upgrade for all 4.x users. &lt;/p&gt;&lt;p&gt;&lt;a href="http://projects.spring.io/spring-framework/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-framework"&gt;GitHub&lt;/a&gt; | &lt;a href="https://jira.spring.io/browse/SPR"&gt;Issues&lt;/a&gt; | &lt;a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/htmlsingle/"&gt;Documentation&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Stay tuned for 4.2 RC1, coming up in May!&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Webinar Replay: Spring XD - A Platform for data at scale and developer productivity</title>
    <link rel="alternate" href="https://spring.io/blog/2015/02/20/webinar-replay-spring-xd-a-platform-for-data-at-scale-and-developer-productivity" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-02-20:1985</id>
    <updated>2015-02-20T07:32:00Z</updated>
    <content type="html">&lt;p&gt;Speakers: Sabby Anandan, Mark Fisher &amp;amp; Mark Pollack &lt;/p&gt;
&lt;p&gt;Slides: &lt;a href="https://speakerdeck.com/sabbyanandan/2015"&gt;https://speakerdeck.com/sabbyanandan/2015&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Worried about Big Data and the challenges inherent in making a real application? You don‚Äôt have to worry anymore! Spring XD provides a one-stop shop solution that spans traditional enterprise to Big Data use cases - both batch and streaming. It's important to choose the right tool for each use-case, which is why Spring XD integrates with technologies such as Spark, Reactor and RxJava to demonstrate the flexibility and the unified programming model to support complex data computation use-cases.  In this webinar, we'll show you how to develop data-driven use cases much faster than other big data solutions on the out of the box XD runtime.&lt;/p&gt;
&lt;p&gt;Learn more about Spring XD: &lt;a href="http://projects.spring.io/spring-xd"&gt;http://projects.spring.io/spring-xd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Learn more about Spring Integration: &lt;a href="http://projects.spring.io/spring-integration"&gt;http://projects.spring.io/spring-integration&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Learn more about Spring Batch: &lt;a href="http://projects.spring.io/spring-batch"&gt;http://projects.spring.io/spring-batch&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Learn more about Spring Data: &lt;a href="http://projects.spring.io/spring-data"&gt;http://projects.spring.io/spring-data&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;iframe width="420" height="315" src="https://www.youtube.com/embed/HMXRbApp0XU" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt; &lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Working with Spring Roo from Spring Tool Suite (STS)</title>
    <link rel="alternate" href="https://spring.io/blog/2015/02/19/working-with-spring-roo-from-spring-tool-suite-sts" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-02-20:1983</id>
    <updated>2015-02-19T21:51:00Z</updated>
    <content type="html">&lt;p&gt;Original Author: Enrique Ruiz, Disid &lt;/p&gt;
&lt;p&gt;As of STS 3.5.1 Spring Roo support and the Spring Roo runtime are installable from the dashboard rather than being directly included in STS.&lt;/p&gt;
&lt;p&gt;With this post we'd like to introduce the Eclipse-based support for Spring Roo so you can take Roo's productivity to  STS and you don't even have to leave the development environment! You can build a new application and deploy it to STS in just a few minutes.&lt;/p&gt;
&lt;p&gt;We will go step-by-step in order to help you get started quickly:&lt;/p&gt;
&lt;p&gt;1.Open your STS IDE. &lt;/p&gt;
&lt;p&gt;2. Open STS dashboard. &lt;/p&gt;
&lt;p&gt;3. Click on Extensions bottom tab and search Spring Roo. &lt;/p&gt;
&lt;p&gt;4. Install &lt;em&gt;Spring Roo (current production release)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/spring-projects/spring-roo/gh-pages/img/current-production-release.jpg" width="567" height="116"&gt;&lt;/p&gt;
&lt;p&gt;5. Install &lt;em&gt;Spring IDE - (Roo extension)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/spring-projects/spring-roo/gh-pages/img/roo-extension.png" width="765" height="92" /&gt;&lt;/p&gt;
&lt;p&gt;From here on you can just follow the steps of the installation wizard. Along the way you need to review and accept the license agreement and restart STS to finalize the installation.&lt;/p&gt;
&lt;p&gt;6. After restarting STS you're ready to work with Spring Roo.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/spring-projects/spring-roo/gh-pages/img/roo-shell-eclipse.png" width="675" height="380"&gt;&lt;/p&gt;
&lt;p&gt;We hope you enjoy this new service. We'll continue to improve the Spring Roo support in future releases of course.&lt;/p&gt;
&lt;p&gt; As always we very much value community feedback!&lt;/p&gt;
&lt;p&gt;For more project specific information please see the &lt;a href="http://projects.spring.io/spring-roo/"&gt;Spring Roo Project Page&lt;/a&gt; | or see Spring Roo on &lt;a href="https://github.com/spring-projects/spring-roo"&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As always, you'll also find Roo on Twitter - either follow &lt;a href="https://www.twitter.com/springroo"&gt;@SpringRoo&lt;/a&gt; or just include #SpringRoo in your tweets.&lt;/p&gt;
&lt;p&gt;Stay tuned to Spring Roo news!&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Reactor 2.0.0.RC1 with native Reactive Streams support now available!</title>
    <link rel="alternate" href="https://spring.io/blog/2015/02/18/reactor-2-0-0-rc1-with-native-reactive-streams-support-now-available" />
    <category term="releases" label="Releases" />
    <author>
      <name>Jon Brisbin</name>
    </author>
    <id>tag:spring.io,2015-02-16:1977</id>
    <updated>2015-02-18T15:53:00Z</updated>
    <content type="html">&lt;p&gt;The Reactor team is happy to announce the release of 2.0.0.RC1, which is now available in &lt;a href="http://repo.spring.io/libs-milestone/io/projectreactor/"&gt;the spring.io Maven repository&lt;/a&gt; as well as &lt;a href="http://search.maven.org/#search%7Cga%7C1%7Cio.projectreactor"&gt;Maven central&lt;/a&gt;. Version 2.0 is an &lt;code&gt;#uberupdate&lt;/code&gt; from Reactor version 1.1 and contains several new components as well as complete rewrites of important classes like &lt;code&gt;Stream&lt;/code&gt;, which now implements &lt;a href="http://github.com/reactive-streams/reactive-streams"&gt;the Reactive Streams standard&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Please note that the Maven coordinates for Reactor 2.0 have changed from those for Reactor 1.x. The new coordinates all fall under the group ID &lt;code&gt;io.projectreactor&lt;/code&gt; rather than the previous &lt;code&gt;org.projectreactor&lt;/code&gt;. A sample dependencies block for a Gradle project might look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint groovy"&gt;ext {&#xD;
  reactorVersion = &amp;#39;2.0.0.RC1&amp;#39;&#xD;
}&#xD;
&#xD;
repositories {&#xD;
  maven { url &amp;#39;http://repo.spring.io/libs-milestone&amp;#39; }&#xD;
  mavenCentral()&#xD;
}&#xD;
&#xD;
compile &amp;quot;io.projectreactor:reactor-core:$reactorVersion&amp;quot;,&#xD;
    &amp;quot;io.projectreactor:reactor-net:$reactorVersion&amp;quot;,&#xD;
    &amp;quot;io.projectreactor.spring:reactor-spring-context:$reactorVersion&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;a href="#what-is-reactor" class="anchor" name="what-is-reactor"&gt;&lt;/a&gt;What is Reactor?&lt;/h3&gt;&lt;p&gt;If you&amp;rsquo;re a complete newbie to Reactor, you might want to first jump over to the spiffy new website at &lt;a href="http://projectreactor.io"&gt;http://projectreactor.io&lt;/a&gt; and get acquainted with it before some of this will make sense.&lt;/p&gt;&lt;h3&gt;&lt;a href="#changelog-tl-dr" class="anchor" name="changelog-tl-dr"&gt;&lt;/a&gt;Changelog TL;DR&lt;/h3&gt;&lt;p&gt;Along with &lt;a href="https://spring.io/blog/2014/10/21/reactor-2-0-0-m1-released-with-reactive-streams-integration"&gt;the changes announced in the 2.0.0.M1 release&lt;/a&gt;, here‚Äôs a brief list of important changes over version 1.1:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Stream&lt;/code&gt; has been rewritten to implement the Reactive Streams standard, is 5-10x faster, and has much less overhead than the previous version.&lt;/li&gt;
  &lt;li&gt;Upgrading from Reactor 1.x code is not hard, with just a few changes to existing code being required to accommodate the new signatures of &lt;code&gt;Stream&lt;/code&gt; and the renaming of &lt;code&gt;Reactor&lt;/code&gt; to &lt;code&gt;EventBus&lt;/code&gt;. Documentation around this transition is ongoing.&lt;/li&gt;
  &lt;li&gt;Reactor‚Äôs &lt;code&gt;Stream&lt;/code&gt; API derives from &lt;a href="https://msdn.microsoft.com/en-gb/data/gg577609.aspx"&gt;Reactive Extensions&lt;/a&gt; and mirrors many of its naming conventions. By leveraging a common vocabulary and behavior, it‚Äôs possible to easily translate Rx.NET and RxJava examples to Reactor.&lt;/li&gt;
  &lt;li&gt;Reactor‚Äôs API has been harmonized around static helper methods and factories to make embedding as easy as possible.&lt;/li&gt;
  &lt;li&gt;TCP support is totally jacked: Reactive Streams backpressure, HTTP server and client, &lt;code&gt;Stream&lt;/code&gt; integration, DSL helper methods.&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://projectreactor.io/"&gt;A new website&lt;/a&gt; with the beginnings of a proper reference manual, more samples, and more javadoc.&lt;/li&gt;
  &lt;li&gt;Community contributions from more than just core project committers.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href="#reactive-streams-is-totally-boss" class="anchor" name="reactive-streams-is-totally-boss"&gt;&lt;/a&gt;Reactive Streams is totally Boss&lt;/h3&gt;&lt;p&gt;If we had to limit ourselves to talking about just one change, then the native and foundational support for Reactive Streams would be it. It‚Äôs hard to overstate just how fundamental Reactive Streams has become to Reactor. Stream processing is the &lt;a href="https://typesafe.com/company/news"&gt;new&lt;/a&gt; &lt;a href="https://twitter.com/search?q=stream%20processing"&gt;black&lt;/a&gt; and Reactor has embraced that from the beginning of the project. The addition of Reactive Streams and its propagation of backpressure support, however, makes processing large volumes of data in real or near-real time much more accessible to your cloud applications. Now patterns such as &lt;code&gt;stop-read&lt;/code&gt; under load, &lt;code&gt;batch flush&lt;/code&gt; or &lt;code&gt;adaptive batch&lt;/code&gt; are available out of the box.&lt;/p&gt;&lt;p&gt;Each step in a Reactor &lt;code&gt;Stream&lt;/code&gt; is a Reactive Streams component that correctly propagates demand and backpressure based on the rate of processing under the current resource constraints. Using Reactive Streams, Reactor 2.0 makes it possible to create a stream of processing that adjusts its resource usage automatically. You can influence the rate at which new items are pulled into the system because of the way Reactive Streams backpressure is communicated upstream. That means a slow downstream component can push back all the way to the source to slow down the ingest rate if current processing is using all available resources.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;Pool&amp;lt;Connection&amp;gt; pool;&#xD;
Stream&amp;lt;Message&amp;gt; input;&#xD;
&#xD;
input.capacity(1)&#xD;
     .batchConsume(msg -&amp;gt; {&#xD;
       pool.getConnection().merge(msg);&#xD;
     }, requestMore -&amp;gt; Math.max(pool.getSize() - pool.getActive(), 1));
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the snippet above we‚Äôre adapting the number of items to process based on the number of available connections in the pool. The &lt;code&gt;Consumer&lt;/code&gt; passed as the first parameter to the &lt;code&gt;batchConsume&lt;/code&gt; method will be invoked governed by the &lt;code&gt;requestMore&lt;/code&gt; value returned from the &lt;code&gt;Function&lt;/code&gt; passed as the second parameter. In this case we‚Äôre going to pre-fetch a number of messages equal to the number of free connections in the pool, or just a single message if all connections are active (in that case we‚Äôll rely on backpressure from the connection pool).&lt;/p&gt;&lt;p&gt;If we wanted to make sure our stream was not a resource hog, we could also change the capacity algorithm to return a number less than the number of available connections, which would leave some connections available to other components in our application.&lt;/p&gt;&lt;h3&gt;&lt;a href="#reactor-is-now-android-friendly" class="anchor" name="reactor-is-now-android-friendly"&gt;&lt;/a&gt;Reactor is now Android-friendly&lt;/h3&gt;&lt;p&gt;Starting with Reactor 2.0.0.RC1, it‚Äôs possible to include Reactor in your Android application by simply excluding the &lt;code&gt;gs-collections&lt;/code&gt; library which would otherwise force you to jump through some hoops due to it‚Äôs size. We‚Äôve implemented a &lt;code&gt;SimpleCachingRegistry&lt;/code&gt; for the &lt;code&gt;EventBus&lt;/code&gt; that doesn‚Äôt use &lt;code&gt;gs-collections&lt;/code&gt;. Future improvements could include a dedicated UI event loop &lt;code&gt;Dispatcher&lt;/code&gt; to make sure your event handlers are run on the correct thread. &lt;/p&gt;&lt;p&gt;We‚Äôre very interested to see how Reactor can facilitate reactive applications on Android devices and how that ties to Reactor‚Äôs extremely high volume, low latency capabilities on the server side. Please let us know if you‚Äôre using Reactor on Android and if there are things we can do to make that experience better.&lt;/p&gt;&lt;h3&gt;&lt;a href="#http-and-better-tcp-and-zeromq-support" class="anchor" name="http-and-better-tcp-and-zeromq-support"&gt;&lt;/a&gt;HTTP and Better TCP and ZeroMQ support&lt;/h3&gt;&lt;p&gt;RC1 introduces new support for HTTP based on Reactor‚Äôs use of Netty 4. It‚Äôs not comprehensive yet, but it provides a few helper methods and some useful abstractions for building (and accessing) non-blocking REST-based micro and nanoservices. I wouldn&amp;rsquo;t be trying to build production services with it yet, as there&amp;rsquo;s still some refining that needs to happen before GA. You can embed a microservice using Reactor without resorting to the Netty API directly. &lt;/p&gt;&lt;p&gt;The following creates a Netty-based embedded HTTP server with path parameters that dispatches tasks onto the shared &lt;code&gt;RingBufferDispatcher&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;HttpServer&amp;lt;String, String&amp;gt; server = NetStreams.httpServer(&#xD;
  spec -&amp;gt; spec.listen(3000)&#xD;
              .codec(StandardCodecs.STRING_CODEC)&#xD;
              .dispatcher(Environment.sharedDispatcher())&#xD;
);&#xD;
&#xD;
server.get(&amp;quot;/echo/{greeting}&amp;quot;, ch -&amp;gt; {&#xD;
  String greeting = ch.param(&amp;quot;greeting&amp;quot;) + &amp;quot; World!&amp;quot;;&#xD;
&#xD;
  ch.transfer(Transfer.NON_CHUNKED)&#xD;
    .responseHeader(&amp;quot;Content-Length&amp;quot;, &amp;quot;&amp;quot; + greeting.length())&#xD;
    .log(&amp;quot;server&amp;quot;);&#xD;
&#xD;
  return Streams.just(greeting);&#xD;
});&#xD;
&#xD;
server.start();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We‚Äôve also updated the TCP and ZeroMQ support to make better use of the important changes we made to &lt;code&gt;Stream&lt;/code&gt;. Most importantly, TCP servers and clients make use of Reactive Streams backpressure support to implement patterns like &amp;lsquo;stop-read&amp;rsquo; to keep the server from overflowing downstream processing by reading too much data from the client, before there are resources available to process it.&lt;/p&gt;&lt;h3&gt;&lt;a href="#the-road-to-ga" class="anchor" name="the-road-to-ga"&gt;&lt;/a&gt;The Road to GA&lt;/h3&gt;&lt;p&gt;We‚Äôll do at least one more RC before releasing Reactor 2.0 GA. There‚Äôs still a few tweaks we need to make around complicated fork/join dispatching before we‚Äôre happy with its predictability. There are likely some additions to the HTTP support that we‚Äôll want to make since this first cut is a fairly simple set of features. We might come across a few more bugs in edge cases as well. &lt;/p&gt;&lt;p&gt;We feel pretty good about this release candidate and we encourage you to try it out. If you‚Äôre doing new development, then we definitely encourage you to build on the Reactive Streams foundation of Reactor 2.0 versus the less capable, pre-Reactive Streams version in 1.1. If you‚Äôre upgrading existing Reactor code, the path is actually quite easy. In almost all cases your code will be greatly simplified. &lt;/p&gt;&lt;h3&gt;&lt;a href="#getting-support" class="anchor" name="getting-support"&gt;&lt;/a&gt;Getting Support&lt;/h3&gt;&lt;p&gt;If you run into problems upgrading your code, or just have general questions about how to use Reactor to solve your fast data problems, don‚Äôt hesitate to ask on the &lt;a href="https://groups.google.com/forum/#!forum/reactor-framework"&gt;Reactor Framework Google Group&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;We also welcome community contributions via &lt;a href="https://github.com/reactor/reactor/pulls"&gt;pull requests on GitHub&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;You might also be interested to know that the Reactive Streams project is being considered for inclusion in JDK 9 in the form of a new &lt;code&gt;java.util.concurrent.Flow&lt;/code&gt; class and appropraite inner classes. The discussion on this topic is being held in the &lt;a href="http://g.oswego.edu/dl/concurrency-interest/"&gt;JSR-166 concurrency-interest&lt;/a&gt; mailling list managed by professor &lt;a href="http://gee.cs.oswego.edu/dl/"&gt;Doug Lea&lt;/a&gt; of the State University of New York at Oswego.&lt;/p&gt;&lt;h3&gt;&lt;a href="#getting-the-code" class="anchor" name="getting-the-code"&gt;&lt;/a&gt;Getting the Code&lt;/h3&gt;&lt;p&gt;Reactor is Apache 2.0 licensed and the project is managed through GitHub:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Reactor (core, groovy, net)&lt;/strong&gt;: &lt;a href="https://github.com/reactor/reactor"&gt;https://github.com/reactor/reactor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Reactor Spring&lt;/strong&gt;: &lt;a href="https://github.com/reactor/reactor-spring"&gt;https://github.com/reactor/reactor-spring&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - February 17th, 2015</title>
    <link rel="alternate" href="https://spring.io/blog/2015/02/17/this-week-in-spring-february-17th-2015" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2015-02-18:1981</id>
    <updated>2015-02-17T23:55:00Z</updated>
    <content type="html">&lt;p&gt;Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! This week I&amp;rsquo;ve been in studio recording the next iteration of the Spring Livelessons series, this one on building cloud-native applications (microservices) with Spring Boot, Spring Cloud, and Cloud Foundry. It&amp;rsquo;s been a lot of fun, and - this morning - I took a break to do two 1.5 hour webinars for O&amp;rsquo;Reilly on building Spring Boot applications and Spring Cloud microservices, both entirely live coded! It&amp;rsquo;s been a fun week for me, and I hope it has for you, as well. &lt;/p&gt;&lt;p&gt;This Thursday the 19th marks the culmination of this year&amp;rsquo;s &lt;em&gt;Lunar New Year&lt;/em&gt;, or &lt;a href="http://en.wikipedia.org/wiki/Chinese_New_Year"&gt;&lt;em&gt;Chinese new year&lt;/em&gt;&lt;/a&gt; or &lt;strong&gt;&lt;em&gt;Spring festival&lt;/em&gt;&lt;/strong&gt;. What&amp;rsquo;s this to do with Spring (the technology)? Not much, besides being a celebration of better things to come and a great name! So happy new year (Êñ∞Âπ¥Âø´‰πê) to readers all around the world!&lt;/p&gt;&lt;p&gt;Anyway, without further ado, let&amp;rsquo;s get to it!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The good Dr. Mark Pollack just &lt;a href="http://spring.io/blog/2015/02/12/spring-xd-1-1-ga-and-1-0-4-released"&gt;announced Spring XD 1.1&lt;/a&gt;! The new release is &lt;em&gt;incredible&lt;/em&gt;: stream processing based on Reactor, RxJava, and Spark; Sqoop and Spark batch jobs (in addition to Spring Batch and Hadoop); Python processor modules; a Java configuration model for custom processor modules; integration with a myriad backends, including Kafka, and &lt;em&gt;much&lt;/em&gt; more! Get the bits, get your data processing pipelines done faster and more reliably, and get home in time to celebrate!&lt;/li&gt;
  &lt;li&gt;The good Dr. Dave Syer just announced &lt;a href="http://spring.io/blog/2015/02/13/spring-cloud-1-0-0-rc3-available-now"&gt;Spring Cloud 1.0.0.RC3 is now available&lt;/a&gt;! This is &lt;em&gt;hopefully&lt;/em&gt; the last milestone before 1.0.0, so be sure to get the bits and try it out!&lt;/li&gt;
  &lt;li&gt;Spring XD ninja Sabby Anandan put together a nice post &lt;a href="http://spring.io/blog/2015/02/12/spring-xd-data-driven-connectivity-within-a-unified-platform"&gt;looking at some of the &lt;em&gt;many&lt;/em&gt; new features in Spring XD 1.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring ninja Stephane Nicoll put together a nice post that &lt;a href="http://spring.io/blog/2015/02/11/better-application-events-in-spring-framework-4-2"&gt;looks at the new events support in Spring framework 4.2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Benjamin Winterberg put together a lovely piece on building Isomorphic (JavaScript views rendered on both the client and the server with React.js) &lt;a href="http://winterbe.com/posts/2015/02/16/isomorphic-react-webapps-on-the-jvm/"&gt;applications with Spring Boot and Nashorn&lt;/a&gt;! This is so cool!&lt;/li&gt;
  &lt;li&gt;Spring (and Spring Boot) make it super simple to put together a headless processing application - you know, one that doesn&amp;rsquo;t have an HTTP endpoint? So, naturally, &lt;a href="https://github.com/rburgst/spring-boot-initscript"&gt;I smiled when I saw this Spring Boot &lt;code&gt;init.d&lt;/code&gt; script&lt;/a&gt;!&lt;/li&gt;
  &lt;li&gt;This Do-It-Yourself example of &lt;a href="http://blog.codeleak.pl/2015/02/openshift-diy-build-spring-boot.html"&gt;running Spring Boot on OpenShift is interesting&lt;/a&gt;. OpenShift has a concept of cartridges. I think - but am not 100% sure - that they provide map logically to the concept of buildpacks on Cloud Foundry and Heroku. Except, apparently, the DIY cartridge can&amp;rsquo;t be scaled up.. so this isn&amp;rsquo;t exactly recommended for any sort of real use.&lt;/li&gt;
  &lt;li&gt;Our pal Dan Woods put together another &lt;a href="http://www.infoq.com/articles/boot-microservices"&gt;stellar look at Spring Boot for microservices for InfoQ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The amazing &lt;a href="http://twitter.com/bdussault"&gt;Brian Dussault&lt;/a&gt; put together &lt;a href="http://spring.io/blog/2015/02/11/java-doesn-t-suck-rockin-the-jvm"&gt;a nice follow-up post&lt;/a&gt; to our pal [James Wards&amp;rsquo; post, &lt;a href="http://www.jamesward.com/2014/12/03/java-doesnt-suck-youre-just-using-it-wrong"&gt;&lt;em&gt;Java Doesn&amp;rsquo;t Suck, You&amp;rsquo;re Just Doing it Wrong&lt;/em&gt;&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Check out this replay to Andy Wilkinson&amp;rsquo;s talk, &lt;a href="http://spring.io/blog/2015/02/10/webinar-replay-documenting-rest-ful-apis"&gt;&lt;em&gt;Documenting REST APIs&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Want to learn more about the Spring Integration Java configuration DSL (that was rhetorical! Of course you do!), then check out &lt;a href="http://spring.io/blog/2015/02/10/webinar-replay-introducing-the-java-dsl-for-spring-integration"&gt;the replay of Gary Russell&amp;rsquo;s awesome webinar on the subject&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Speaking of Dan Woods, check out the replay &lt;a href="http://spring.io/blog/2015/02/10/springone2gx-2014-replay-ratpack-web-framework"&gt;of his SpringOne2GX 2014 talk introducing RatPack&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Groovy-language ninja C√©dric Champeau&amp;rsquo;s SpringOne2GX 2014 talk, &lt;a href="http://spring.io/blog/2015/02/10/springone2gx-2014-replay-rethinking-api-design-with-traits"&gt;&lt;em&gt;Rethinking API Design with Traits&lt;/em&gt;&lt;/a&gt; is available!&lt;/li&gt;
  &lt;li&gt;Kenneth Kousen&amp;rsquo;s SpringOne2GX 2014 talk introducing the various &lt;a href="http://spring.io/blog/2015/02/10/springone2gx-2014-replay-testing-grails"&gt;approaches to unit-testing in Grails is now available online&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Ryan Vanderwerf&amp;rsquo;s SpringOne2GX 2014 talk introducing &lt;a href="http://spring.io/blog/2015/02/10/springone2gx-2014-replay-web-clustering-integration-with-terracotta-bigmemory-quartz-grails"&gt;web clustering with Terracotta and Grails is now available online&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Peter Niederwieser&amp;rsquo;s SpringOne2GX 2014 talk, &lt;a href="http://spring.io/blog/2015/02/10/springone2gx-2014-replay-building-a-continuous-delivery-pipeline-with-gradle-and-jenkins"&gt;&lt;em&gt;Building a Continuous Delivery Pipeline with Gradle and Jenkins&lt;/em&gt;, is now available&lt;/a&gt;!&lt;/li&gt;
  &lt;li&gt;Colin Harrington&amp;rsquo;s SpringOne2GX 2014 talk on securing &lt;a href="http://spring.io/blog/2015/02/10/springone2gx-2014-replay-securing-your-grails-app-beyond-authentication-authorization"&gt;Grails apps is now available&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Also, &lt;a href="http://thenextweb.com/insider/2015/02/18/http2-first-major-update-http-sixteen-years-finalized/"&gt;HTTP 2 is final&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2014 Replay: "Bootiful" Applications with Spring Boot</title>
    <link rel="alternate" href="https://spring.io/blog/2015/02/17/springone2gx-2014-replay-bootiful-applications-with-spring-boot" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-02-18:1980</id>
    <updated>2015-02-17T22:57:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2014. &lt;/p&gt;
&lt;p&gt;Speaker: Josh Long, Phil Webb&lt;/p&gt;
&lt;p&gt; Slides: &lt;a href="http://www.slideshare.net/SpringCentral/bootiful"&gt;http://www.slideshare.net/SpringCentral/bootiful&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Core Spring Track &lt;/p&gt;
&lt;p&gt;Alright, so maybe &amp;quot;bootiful&amp;quot; won't ever work, but we tried, and it was worth it too because you're reading this. Spring Boot, the new convention-over-configuration centric framework from the Spring team at Pivotal, marries Spring's flexibility with conventional, common sense defaults to make application development not just fly, but pleasant! Join Spring developer advocate Josh Long and Spring Boot co-lead Phillip Webb for a look at what Spring Boot is, why it's turning heads, why you should consider it for your next application (REST, web, batch, big-data, integration, whatever!) and how to get started.&lt;/p&gt;
&lt;p&gt;&#xD;
  &lt;iframe width="560" height="315" src="https://www.youtube.com/embed/HCyYEVRZISk" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&#xD;
&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2014 Replay: Testing with Spring Framework 4.x</title>
    <link rel="alternate" href="https://spring.io/blog/2015/02/17/springone2gx-2014-replay-testing-with-spring-framework-4-x" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-02-18:1979</id>
    <updated>2015-02-17T22:47:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2014. &lt;/p&gt;
&lt;p&gt;Speaker: Sam Brannen, Swiftmind &lt;/p&gt;
&lt;p&gt;Core Spring Track &lt;/p&gt;
&lt;p&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/testing-with-spring-framework-4x"&gt;http://www.slideshare.net/SpringCentral/testing-with-spring-framework-4x&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Spring Framework has undergone a lot of innovation in the 4.0 and 4.1 releases, and so has its testing support. Join Spring Test component lead Sam Brannen in this talk to discover what's new in Spring's testing support in 4.0 through 4.1. This talk will provide attendees an overview of what's been deprecated, what's changed, and what's been introduced in Spring's testing support over the last two years, with real life examples and tips for best practices. Highlights include using SocketUtils to scan for free TCP &amp;amp; UDP server ports, the ActiveProfilesResolver API, meta-annotation support for test annotations including attribute overrides, best practices with TestNG, using Groovy scripts to configure an ApplicationContext for integration tests, improvements to SQL script execution and embedded databases, the new TestContext framework bootstrap strategy, programmatic transaction management in tests, and more.&lt;/p&gt;
&lt;p&gt;&#xD;
  &lt;iframe width="560" height="315" src="https://www.youtube.com/embed/5tgkxGEvK4U" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&#xD;
&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2014 Replay: Reactive Oriented Architecture with Grails</title>
    <link rel="alternate" href="https://spring.io/blog/2015/02/17/springone2gx-2014-replay-reactive-oriented-architecture-with-grails" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-02-18:1978</id>
    <updated>2015-02-17T22:46:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2014. &lt;/p&gt;
&lt;p&gt;Speaker: Steve Pember &lt;/p&gt;
&lt;p&gt;G&amp;amp;G Special Topics &lt;/p&gt;
&lt;p&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/reactive-grails"&gt;http://www.slideshare.net/SpringCentral/reactive-grails&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;The natural tendency for application developers is to construct their code in a procedural, synchronous, monolithic pattern. Veteran developers know that this leads to error prone, unscalable, slow software - yet it is alarmingly prevalent. There have been several architectural patterns that have risen over the years which have attempted to mitigate this problem. One of the most popular has been Service Oriented Architecture, which involves breaking the monolithic application into a distributed system of several smaller services. In this talk, I argue that SOA is a decent start, but not nearly good enough. I will discuss the tenants of the Reactive Pattern and the importance of moving away from Monolithic to Reactive architectures. We will discuss the various Groovy-friendly technologies that allow us to build distributed, micro-service based applications and cover effective communication strategies between each service. We will see how being Reactive is the only viable architecture for large, efficient, scalable systems. If Reactive is new to you, this should be an excellent introduction.&lt;/p&gt;
&lt;p&gt;&#xD;
  &lt;iframe width="560" height="315" src="https://www.youtube.com/embed/wUxbb6X0Kgs" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&#xD;
&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Cloud 1.0.0.RC3 Available Now</title>
    <link rel="alternate" href="https://spring.io/blog/2015/02/13/spring-cloud-1-0-0-rc3-available-now" />
    <category term="releases" label="Releases" />
    <author>
      <name>Dave Syer</name>
    </author>
    <id>tag:spring.io,2015-02-13:1976</id>
    <updated>2015-02-13T15:53:00Z</updated>
    <content type="html">&lt;p&gt;Spring Cloud 1.0.0.RC3 is available now from &lt;a href="https://repo.spring.io/libs-milestone-local"&gt;https://repo.spring.io/libs-milestone-local&lt;/a&gt;. This is (hopefully) the last milestone release before 1.0.0. There were some bug fixes since 1.0.0.RC2 and also a few small new features:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Refactored the Feign support to look a bit more like Spring Data (so &lt;code&gt;@EnableFeignClients&lt;/code&gt; instead of &lt;code&gt;@FeignClientScan&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;Support for multipart/form-data in the Zuul proxy&lt;/li&gt;
  &lt;li&gt;Support for including and excluding remote services in the automatic route registration in Zuul&lt;/li&gt;
  &lt;li&gt;Support for declarative Ribbon retry in Zuul&lt;/li&gt;
  &lt;li&gt;Cleaned up of a lot of dependencies. If you use the spring-cloud-starters you should get a nice consistent experience of adding and subtracting features. Gradle users need to use the &lt;a href="https://github.com/spring-gradle-plugins/dependency-management-plugin"&gt;dependency management plugin&lt;/a&gt; for the same experience.&lt;/li&gt;
  &lt;li&gt;Added small, bite-sized &lt;a href="https://github.com/spring-cloud-samples/tests"&gt;sample projects&lt;/a&gt; for integration testing of classpath isolation issues.&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Spring XD 1.1 GA and 1.0.4 released</title>
    <link rel="alternate" href="https://spring.io/blog/2015/02/12/spring-xd-1-1-ga-and-1-0-4-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Mark Pollack</name>
    </author>
    <id>tag:spring.io,2015-02-10:1969</id>
    <updated>2015-02-12T17:17:00Z</updated>
    <content type="html">&lt;p&gt;Six months after the 1.0 GA release, the team is happy to announce the availability of Spring XD 1.1 GA. &lt;/p&gt;&lt;p&gt;Download Links:&lt;br/&gt;* 1.1.0.RELEASE: &lt;a href="http://repo.spring.io/release/org/springframework/xd/spring-xd/1.1.0.RELEASE/spring-xd-1.1.0.RELEASE-dist.zip"&gt;zip&lt;/a&gt;, &lt;a href="https://github.com/spring-projects/spring-xd/wiki/Getting-Started#osx-homebrew-installation"&gt;homebrew&lt;/a&gt;, &lt;a href="https://github.com/spring-projects/spring-xd/wiki/Getting-Started#redhatcentos-installation"&gt;yum&lt;/a&gt;.&lt;br/&gt;* 1.0.4.RELEASE: &lt;a href="http://repo.spring.io/libs-milestone/org/springframework/xd/spring-xd/1.0.4.RELEASE/spring-xd-1.0.4.RELEASE-dist.zip"&gt;zip&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Please read &lt;a href="https://spring.io/blog/2015/02/12/spring-xd-data-driven-connectivity-within-a-unified-platform"&gt;Sabby Anandan&amp;rsquo;s blog&lt;/a&gt; for a general overview of Spring XD. Specific to 1.1, a ton of features have been added. Here are some that will give you the most bang for your big data buck.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Stream Processing with &lt;a href="https://github.com/spring-projects/spring-xd/wiki/Creating-a-Data-Stream-Processor-Module#reactor-streams"&gt;Reactor&lt;/a&gt;, &lt;a href="https://github.com/spring-projects/spring-xd/wiki/Creating-a-Data-Stream-Processor-Module#rxjava-streams"&gt;RxJava&lt;/a&gt;, &lt;a href="https://github.com/spring-projects/spring-xd/wiki/Creating-a-Data-Stream-Processor-Module#spark-streaming"&gt;Spark Streaming&lt;/a&gt; and &lt;a href="https://github.com/spring-projects/spring-xd/wiki/Creating-a-Python-Module"&gt;Python&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Orchestrate &lt;a href="https://github.com/spring-projects/spring-xd/wiki/Batch-Jobs#running-spark-application-as-a-batch-job-sparkapp"&gt;Spark&lt;/a&gt; and &lt;a href="https://github.com/spring-projects/spring-xd/wiki/Batch-Jobs#running-sqoop-as-a-batch-job-sqoop"&gt;Sqoop&lt;/a&gt; Batch Jobs&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-projects/spring-xd/wiki/Application-Configuration#kafka"&gt;Kafka&lt;/a&gt; based message bus, &lt;a href="https://github.com/spring-projects/spring-xd/wiki/Sources#kafka"&gt;source&lt;/a&gt; and &lt;a href="https://github.com/spring-projects/spring-xd/wiki/Sinks#kafka-sink"&gt;sink&lt;/a&gt; along with &lt;a href="https://spring.io/blog/2015/02/09/spring-integration-kafka-extension-1-0-ga-is-available"&gt;new general purpose high level Kafka APIs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-projects/spring-xd/wiki/Application-Configuration#rabbitmq"&gt;Batching and compression for RabbitMQ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Easily develop, &lt;a href="https://github.com/spring-projects/spring-xd/wiki/Creating-a-Processor-Module#write-a-test"&gt;test&lt;/a&gt;, and &lt;a href="https://github.com/spring-projects/spring-xd/wiki/Creating-a-Processor-Module#register-the-module"&gt;package custom modules&lt;/a&gt; and &lt;a href="https://github.com/spring-projects/spring-xd/wiki/Creating-a-Processor-Module#register-the-module"&gt;upload&lt;/a&gt; them to the admin server.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-projects/spring-xd/wiki/Running-on-YARN#working-with-container-groups"&gt;Containers group management when running XD on YARN&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-projects/spring-xd/wiki/Application-Configuration#customizing-authorization"&gt;Role based authorization of REST endpoints&lt;/a&gt; and &lt;a href="https://github.com/spring-projects/spring-xd/wiki/Application-Configuration#ldap-authentication"&gt;LDAP&lt;/a&gt;/&lt;a href="https://github.com/spring-projects/spring-xd/wiki/Application-Configuration#file-based-authentication"&gt;file&lt;/a&gt; based authentication&lt;/li&gt;
  &lt;li&gt;Support for Pivotal, Hortonworks, and Cloudera Hadoop distributions.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;There are &lt;a href="https://github.com/spring-projects/spring-xd-samples"&gt;two dozen sample applications available&lt;/a&gt;, so check them out.&lt;/p&gt;&lt;p&gt;As a sneak peek of things to come, Andy Clement and his team are working on an amazing UI for authoring and monitoring XD Streams. Here is a screen shot based on the &lt;a href="https://github.com/spring-projects/spring-xd-samples/tree/master/analytics-dashboard"&gt;analytics-dashboard application&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/markpollack/spring-xd-images/master/spring-xd-flo.png" alt="Flo""/&gt;&lt;/p&gt;&lt;p&gt;Stay tuned!&lt;/p&gt;&lt;p&gt;Feedback is very important, so please keep in touch with questions and comments via&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://stackoverflow.com/questions/tagged/spring-xd"&gt;StackOverflow&lt;/a&gt; &lt;code&gt;spring-xd&lt;/code&gt; tag&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://jira.spring.io/browse/XD/?selectedTab=com.atlassian.jira.jira-projects-plugin:summary-panel"&gt;Spring JIRA&lt;/a&gt; or &lt;a href="https://github.com/spring-projects/spring-xd/issues"&gt;GitHub Issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
</feed>

