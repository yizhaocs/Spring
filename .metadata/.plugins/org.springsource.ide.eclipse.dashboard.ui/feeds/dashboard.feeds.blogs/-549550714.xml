<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Spring</title>
  <link rel="alternate" href="https://spring.io/blog" />
  <link rel="self" href="https://spring.io/blog.atom" />
  <id>http://spring.io/blog.atom</id>
  <icon>https://spring.io/favicon.ico</icon>
  <updated>2015-02-23T13:44:00Z</updated>
  <entry>
    <title>Better dependency management for Gradle</title>
    <link rel="alternate" href="https://spring.io/blog/2015/02/23/better-dependency-management-for-gradle" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Andy Wilkinson</name>
    </author>
    <id>tag:spring.io,2015-02-19:1982</id>
    <updated>2015-02-23T13:44:00Z</updated>
    <content type="html">&lt;p&gt;Maven&amp;rsquo;s &lt;a href="http://maven.apache.org/guides/introduction/introduction-to-dependency-mechanism.html"&gt;dependency management&lt;/a&gt; includes the concept of a bill-of-materials (bom). A bom is a special kind of pom that is used to control the versions of a project&amp;rsquo;s dependencies and provides a central place to define and update those versions.&lt;/p&gt;&lt;p&gt;A number of Spring projects including Spring Framework, Spring Cloud, Spring Boot, and the Spring IO Platform provide boms to make things easier for Maven users. Unfortunately, things haven&amp;rsquo;t been quite so easy if you&amp;rsquo;re using Gradle.&lt;/p&gt;&lt;h2&gt;&lt;a href="#dependency-management-in-gradle" class="anchor" name="dependency-management-in-gradle"&gt;&lt;/a&gt;Dependency management in Gradle&lt;/h2&gt;&lt;p&gt;&lt;a href="https://gradle.org/docs/current/userguide/dependency_management.html"&gt;Gradle&amp;rsquo;s dependency management&lt;/a&gt; uses a &lt;a href="https://gradle.org/docs/current/dsl/org.gradle.api.artifacts.ResolutionStrategy.html"&gt;&lt;code&gt;ResolutionStrategy&lt;/code&gt;&lt;/a&gt; to take control of a project&amp;rsquo;s dependency versions. This offers a lot of power and flexibility but doesn&amp;rsquo;t provide a way to reuse the dependency management that&amp;rsquo;s already been declared in a Maven bom. As a result, you have to do so manually. Depending on the bom, this can easily equate to tens of additional lines in your &lt;code&gt;build.gradle&lt;/code&gt; script just to reuse some existing configuration.&lt;/p&gt;&lt;h2&gt;&lt;a href="#reusing-a-bom-in-gradle" class="anchor" name="reusing-a-bom-in-gradle"&gt;&lt;/a&gt;Reusing a bom in Gradle&lt;/h2&gt;&lt;p&gt;One of Gradle&amp;rsquo;s key strengths is that it can be easily extended and its behaviour customized through the use of plugins. We&amp;rsquo;ve taken advantage of this and written a &lt;a href="https://plugins.gradle.org/plugin/io.spring.dependency-management"&gt;dependency management plugin for Gradle&lt;/a&gt;. It&amp;rsquo;s compatible with both Gradle 1.x and 2.x. This plugin allows you to use a Maven bom to control your build&amp;rsquo;s dependencies in a handful of lines. The first step is to apply the plugin. In Gradle 2.1 and later:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint groovy"&gt;plugins {&#xD;
  id &amp;quot;io.spring.dependency-management&amp;quot; version &amp;quot;0.4.0.RELEASE&amp;quot;&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In earlier versions of Gradle it&amp;rsquo;s a little more verbose:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint groovy"&gt;buildscript {&#xD;
  repositories {&#xD;
    jcenter()&#xD;
  }&#xD;
  dependencies {&#xD;
    classpath &amp;quot;io.spring.gradle:dependency-management-plugin:0.4.0.RELEASE&amp;quot;&#xD;
  }&#xD;
}&#xD;
&#xD;
apply plugin: &amp;quot;io.spring.dependency-management&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Once the plugin&amp;rsquo;s been applied you can use it to import a Maven bom:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint groovy"&gt;dependencyManagement {&#xD;
  imports {&#xD;
    mavenBom &amp;#39;io.spring.platform:platform-bom:1.1.1.RELEASE&amp;#39;&#xD;
  }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With this configuration in place you can declare dependencies on anything in the bom without specifying a version:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint groovy"&gt;dependencies {&#xD;
    compile &amp;#39;org.springframework:spring-core&amp;#39;&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The imported bom will control the version of the dependency. It will also control the version of its transitive dependencies if they&amp;rsquo;re listed in the bom.&lt;/p&gt;&lt;h2&gt;&lt;a href="#exclusions-in-gradle" class="anchor" name="exclusions-in-gradle"&gt;&lt;/a&gt;Exclusions in Gradle&lt;/h2&gt;&lt;p&gt;Gradle can retrieve dependencies from a Maven repository and it uses the metadata in Maven pom files to do so. However, rather than obeying Maven&amp;rsquo;s rules, it applies its own, subtly different semantics to the metadata. One area where this can cause problems is with the exclusion of transitive dependencies. This is best illustrated with a simple example.&lt;/p&gt;&lt;p&gt;Imagine a module that depends on a couple of Spring Framework modules,&lt;code&gt;spring-core&lt;/code&gt; and &lt;code&gt;spring-beans&lt;/code&gt;, and that uses SLF4J rather than Commons Logging. The dependencies in its pom would look something like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint xml"&gt;&amp;lt;dependency&amp;gt;&#xD;
  &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;&#xD;
  &amp;lt;artifactId&amp;gt;spring-core&amp;lt;/artifactId&amp;gt;&#xD;
  &amp;lt;version&amp;gt;4.1.4.RELEASE&amp;lt;/version&amp;gt;&#xD;
  &amp;lt;exclusions&amp;gt;&#xD;
    &amp;lt;exclusion&amp;gt;&#xD;
      &amp;lt;groupId&amp;gt;commons-logging&amp;lt;/groupId&amp;gt;&#xD;
      &amp;lt;artifactId&amp;gt;commons-logging&amp;lt;/artifactId&amp;gt;&#xD;
    &amp;lt;/exclusion&amp;gt;&#xD;
  &amp;lt;/exclusions&amp;gt;&#xD;
&amp;lt;/dependency&amp;gt;&#xD;
&amp;lt;dependency&amp;gt;&#xD;
  &amp;lt;groupId&amp;gt;org.springframework&amp;lt;/groupId&amp;gt;&#xD;
  &amp;lt;artifactId&amp;gt;spring-beans&amp;lt;/artifactId&amp;gt;&#xD;
  &amp;lt;version&amp;gt;4.1.4.RELEASE&amp;lt;/version&amp;gt;&#xD;
&amp;lt;/dependency&amp;gt;&#xD;
&amp;lt;dependency&amp;gt;&#xD;
  &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt;&#xD;
  &amp;lt;artifactId&amp;gt;jcl-over-slf4j&amp;lt;/artifactId&amp;gt;&#xD;
  &amp;lt;version&amp;gt;1.7.10&amp;lt;/version&amp;gt;&#xD;
&amp;lt;/dependency&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;If a Maven build depends on this module its dependency tree will look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;\- com.example:my-library:jar:0.0.1-SNAPSHOT:compile&#xD;
   +- org.springframework:spring-core:jar:4.1.4.RELEASE:compile&#xD;
   +- org.springframework:spring-beans:jar:4.1.4.RELEASE:compile&#xD;
   \- org.slf4j:jcl-over-slf4j:jar:1.7.10:compile&#xD;
      \- org.slf4j:slf4j-api:jar:1.7.10:compile
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;commons-logging&lt;/code&gt; isn&amp;rsquo;t listed as the only module that depends upon it is &lt;code&gt;spring-core&lt;/code&gt; where it has been excluded.&lt;/p&gt;&lt;p&gt;The dependency tree of the equivalent Gradle build looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;\--- com.example:my-library:0.0.1-SNAPSHOT&#xD;
     +--- org.springframework:spring-core:4.1.4.RELEASE&#xD;
     |    \--- commons-logging:commons-logging:1.2&#xD;
     +--- org.springframework:spring-beans:4.1.4.RELEASE&#xD;
     |    \--- org.springframework:spring-core:4.1.4.RELEASE (*)&#xD;
     \--- org.slf4j:jcl-over-slf4j:1.7.10&#xD;
          \--- org.slf4j:slf4j-api:1.7.10
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Despite the exclusion, &lt;code&gt;commons-logging&lt;/code&gt; is listed this time. This can be problematic as it leaves your classpath polluted with dependencies that should not be there. You can work around the problem by manually configuring the required exclusions in your Gradle build, but first of all you have to know what the exclusions should be, and then you have to go through the tedious and error-prone process of configuring them.&lt;/p&gt;&lt;h2&gt;&lt;a href="#honoring-a-pom-rsquo-s-exclusions" class="anchor" name="honoring-a-pom-rsquo-s-exclusions"&gt;&lt;/a&gt;Honoring a pom&amp;rsquo;s exclusions&lt;/h2&gt;&lt;p&gt;The dependency management plugin changes Gradle&amp;rsquo;s handling of a pom&amp;rsquo;s exclusions so that they behave as they do in Maven. With the plugin applied to the example project, it no longer pulls in &lt;code&gt;commons-logging&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;\--- com.example:my-library:0.0.1-SNAPSHOT&#xD;
     +--- org.springframework:spring-core:4.1.4.RELEASE&#xD;
     +--- org.springframework:spring-beans:4.1.4.RELEASE&#xD;
     |    \--- org.springframework:spring-core:4.1.4.RELEASE&#xD;
     \--- org.slf4j:jcl-over-slf4j:1.7.10&#xD;
          \--- org.slf4j:slf4j-api:1.7.10
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a href="#using-the-plugin-with-spring-boot" class="anchor" name="using-the-plugin-with-spring-boot"&gt;&lt;/a&gt;Using the plugin with Spring Boot&lt;/h2&gt;&lt;p&gt;There are some similarities between this plugin and Spring Boot&amp;rsquo;s Gradle plugin. For example, the Spring Boot plugin also &lt;a href="http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#build-tool-plugins-gradle-dependencies-without-versions"&gt;allows dependencies to be declared without a version&lt;/a&gt;, however it doesn&amp;rsquo;t affect transitive dependencies and doesn&amp;rsquo;t honor Maven exclusions. In Spring Boot 1.3 we intend to &lt;a href="https://github.com/spring-projects/spring-boot/issues/2133"&gt;remove Boot&amp;rsquo;s own dependency management and to start using the dependency management plugin instead&lt;/a&gt;. In the meantime, the two plugins will happily co-exist and you can configure the dependency management plugin to use Spring Boot&amp;rsquo;s starter bom:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint groovy"&gt;buildscript {&#xD;
  repositories {&#xD;
    jcenter()&#xD;
  }&#xD;
  dependencies {&#xD;
    classpath &amp;quot;io.spring.gradle:dependency-management-plugin:0.4.0.RELEASE&amp;quot;&#xD;
    classpath &amp;quot;org.springframework.boot:spring-boot-gradle-plugin:1.2.1.RELEASE&amp;quot;&#xD;
  }&#xD;
}&#xD;
&#xD;
apply plugin: &amp;quot;io.spring.dependency-management&amp;quot;&#xD;
apply plugin: &amp;quot;spring-boot&amp;quot;&#xD;
&#xD;
repositories {&#xD;
  jcenter()&#xD;
}&#xD;
&#xD;
dependencyManagement {&#xD;
  imports {&#xD;
    mavenBom &amp;#39;org.springframework.boot:spring-boot-starter-parent:1.2.1.RELEASE&amp;#39;&#xD;
  }&#xD;
}&#xD;
&#xD;
dependencies {&#xD;
  compile &amp;quot;org.springframework.boot:spring-boot-starter-web&amp;quot;&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a href="#learning-more" class="anchor" name="learning-more"&gt;&lt;/a&gt;Learning more&lt;/h2&gt;&lt;p&gt;In addition to the features described above, the plugin has support for working with a bom&amp;rsquo;s properties (both overriding them and using them in your Gradle build), automatically including dependency management metadata in Gradle-generated pom files, and more. Take a look at the &lt;a href="https://github.com/spring-gradle-plugins/dependency-management-plugin/blob/master/README.md"&gt;README&lt;/a&gt; for further details.&lt;/p&gt;&lt;p&gt;The plugin is Apache-licensed and is on &lt;a href="https://github.com/spring-gradle-plugins/dependency-management-plugin"&gt;GitHub&lt;/a&gt;. GitHub&amp;rsquo;s also used for &lt;a href="https://github.com/spring-gradle-plugins/dependency-management-plugin/issues"&gt;issue tracking&lt;/a&gt;. Feature suggestions, pull requests, and bug reports are always welcome.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Stream Processing in Spring XD 1.1</title>
    <link rel="alternate" href="https://spring.io/blog/2015/02/20/stream-processing-in-spring-xd-1-1" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2015-02-20:1987</id>
    <updated>2015-02-20T22:17:06Z</updated>
    <content type="html">&lt;blockquote&gt;&lt;p&gt;This tip is drawn heavily from this Wiki-page on &lt;a href="https://github.com/spring-projects/spring-xd/wiki/Creating-a-Data-Stream-Processor-Module#reactor-streams"&gt;Spring XD&amp;rsquo;s streaming support&lt;/a&gt; by various Spring XD team-members, and particularly the amazing &lt;a href="https://github.com/ilayaperumalg"&gt;Ilayaperumal Gopinathan&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Spring XD 1.1 is here and is &lt;em&gt;packed&lt;/em&gt; with lots of new features. One theme for this release is rich stream processing support. Spring XD 1.1 provides integration with &lt;a href="https://github.com/reactor"&gt;Project Reactor&lt;/a&gt; &lt;a href="https://github.com/reactor/reactor/blob/master/reactor-core/src/main/java/reactor/rx/Stream.java"&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt;s, &lt;a href="https://github.com/ReactiveX/"&gt;RxJava&lt;/a&gt; &lt;a href="https://github.com/ReactiveX/RxJava/wiki/Observable"&gt;&lt;code&gt;Observable&lt;/code&gt;&lt;/a&gt;s, and &lt;a href="https://spark.apache.org/"&gt;Spark&lt;/a&gt;&amp;rsquo;s streaming.&lt;/p&gt;&lt;p&gt;Let&amp;rsquo;s look specifically at using Reactor, though the concepts are similar across all of the supported streaming APIs.&lt;/p&gt;&lt;p&gt;Messages that are delivered on the Message Bus are accessed from the input Stream. The return value is the output Stream that is the result of applying various operations to the input stream. The content of the output Stream is sent to the message bus for consumption by other processors or sinks. To implement a &lt;code&gt;Stream&lt;/code&gt;-based processor module you need to implement the interface &lt;code&gt;org.springframework.xd.reactor.Processor&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;import org.springframework.xd.reactor.Processor;&#xD;
import org.springframework.xd.tuple.Tuple;&#xD;
import reactor.rx.Stream;&#xD;
&#xD;
import static com.acme.Math.avg;&#xD;
import static org.springframework.xd.tuple.TupleBuilder.tuple;&#xD;
&#xD;
public class MovingAverage implements Processor&amp;lt;Tuple, Tuple&amp;gt; {&#xD;
&#xD;
  @Override&#xD;
  public Stream&amp;lt;Tuple&amp;gt; process(Stream&amp;lt;Tuple&amp;gt; inputStream) {&#xD;
    return inputStream.map(tuple -&amp;gt; tuple.getDouble(&amp;quot;measurement&amp;quot;))&#xD;
      .buffer(5)&#xD;
      .map(data -&amp;gt; tuple().of(&amp;quot;average&amp;quot;, avg(data)));&#xD;
  }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Writing a test for this is as simple as setting up a Spring Integration flow that takes input on a request channel and routes it to this processor via a &lt;code&gt;org.springframework.xd.reactor.SynchronousDispatcherMessageHandler&lt;/code&gt; component which itself writes its output to an output channel. From there, you can &lt;a href="https://github.com/spring-projects/spring-xd/wiki/Modules#module-packaging"&gt;package&lt;/a&gt; and &lt;a href="https://github.com/spring-projects/spring-xd/wiki/Creating-a-Processor-Module#register-the-module"&gt;register&lt;/a&gt; the custom processor in the Spring XD admin server.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Framework 4.1.5 released</title>
    <link rel="alternate" href="https://spring.io/blog/2015/02/20/spring-framework-4-1-5-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Stéphane Nicoll</name>
    </author>
    <id>tag:spring.io,2015-02-20:1984</id>
    <updated>2015-02-20T13:04:00Z</updated>
    <content type="html">&lt;p&gt;It’s my pleasure to announce that Spring Framework 4.1.5 has been released and is available now from &lt;a href="http://repo.spring.io/release"&gt;repo.spring.io&lt;/a&gt; and Maven Central.&lt;/p&gt;&lt;p&gt;This maintenance release includes &lt;a href="https://jira.spring.io/secure/ReleaseNote.jspa?projectId=10000&amp;version=14861"&gt;49 fixes and enhancements&lt;/a&gt; from 4.1.4 and is a strongly recommended upgrade for all 4.x users. &lt;/p&gt;&lt;p&gt;&lt;a href="http://projects.spring.io/spring-framework/"&gt;Project Page&lt;/a&gt; | &lt;a href="https://github.com/spring-projects/spring-framework"&gt;GitHub&lt;/a&gt; | &lt;a href="https://jira.spring.io/browse/SPR"&gt;Issues&lt;/a&gt; | &lt;a href="https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/htmlsingle/"&gt;Documentation&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Stay tuned for 4.2 RC1, coming up in May!&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Webinar Replay: Spring XD - A Platform for data at scale and developer productivity</title>
    <link rel="alternate" href="https://spring.io/blog/2015/02/20/webinar-replay-spring-xd-a-platform-for-data-at-scale-and-developer-productivity" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-02-20:1985</id>
    <updated>2015-02-20T07:32:00Z</updated>
    <content type="html">&lt;p&gt;Speakers: Sabby Anandan, Mark Fisher &amp;amp; Mark Pollack &lt;/p&gt;
&lt;p&gt;Slides: &lt;a href="https://speakerdeck.com/sabbyanandan/2015"&gt;https://speakerdeck.com/sabbyanandan/2015&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Worried about Big Data and the challenges inherent in making a real application? You don’t have to worry anymore! Spring XD provides a one-stop shop solution that spans traditional enterprise to Big Data use cases - both batch and streaming. It's important to choose the right tool for each use-case, which is why Spring XD integrates with technologies such as Spark, Reactor and RxJava to demonstrate the flexibility and the unified programming model to support complex data computation use-cases.  In this webinar, we'll show you how to develop data-driven use cases much faster than other big data solutions on the out of the box XD runtime.&lt;/p&gt;
&lt;p&gt;Learn more about Spring XD: &lt;a href="http://projects.spring.io/spring-xd"&gt;http://projects.spring.io/spring-xd&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Learn more about Spring Integration: &lt;a href="http://projects.spring.io/spring-integration"&gt;http://projects.spring.io/spring-integration&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Learn more about Spring Batch: &lt;a href="http://projects.spring.io/spring-batch"&gt;http://projects.spring.io/spring-batch&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Learn more about Spring Data: &lt;a href="http://projects.spring.io/spring-data"&gt;http://projects.spring.io/spring-data&lt;/a&gt;&lt;/p&gt;
&lt;p&gt; &lt;iframe width="420" height="315" src="https://www.youtube.com/embed/HMXRbApp0XU" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt; &lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Working with Spring Roo from Spring Tool Suite (STS)</title>
    <link rel="alternate" href="https://spring.io/blog/2015/02/19/working-with-spring-roo-from-spring-tool-suite-sts" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-02-20:1983</id>
    <updated>2015-02-19T21:51:00Z</updated>
    <content type="html">&lt;p&gt;Original Author: Enrique Ruiz, Disid &lt;/p&gt;
&lt;p&gt;As of STS 3.5.1 Spring Roo support and the Spring Roo runtime are installable from the dashboard rather than being directly included in STS.&lt;/p&gt;
&lt;p&gt;With this post we'd like to introduce the Eclipse-based support for Spring Roo so you can take Roo's productivity to  STS and you don't even have to leave the development environment! You can build a new application and deploy it to STS in just a few minutes.&lt;/p&gt;
&lt;p&gt;We will go step-by-step in order to help you get started quickly:&lt;/p&gt;
&lt;p&gt;1.Open your STS IDE. &lt;/p&gt;
&lt;p&gt;2. Open STS dashboard. &lt;/p&gt;
&lt;p&gt;3. Click on Extensions bottom tab and search Spring Roo. &lt;/p&gt;
&lt;p&gt;4. Install &lt;em&gt;Spring Roo (current production release)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/spring-projects/spring-roo/gh-pages/img/current-production-release.jpg" width="567" height="116"&gt;&lt;/p&gt;
&lt;p&gt;5. Install &lt;em&gt;Spring IDE - (Roo extension)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/spring-projects/spring-roo/gh-pages/img/roo-extension.png" width="765" height="92" /&gt;&lt;/p&gt;
&lt;p&gt;From here on you can just follow the steps of the installation wizard. Along the way you need to review and accept the license agreement and restart STS to finalize the installation.&lt;/p&gt;
&lt;p&gt;6. After restarting STS you're ready to work with Spring Roo.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/spring-projects/spring-roo/gh-pages/img/roo-shell-eclipse.png" width="675" height="380"&gt;&lt;/p&gt;
&lt;p&gt;We hope you enjoy this new service. We'll continue to improve the Spring Roo support in future releases of course.&lt;/p&gt;
&lt;p&gt; As always we very much value community feedback!&lt;/p&gt;
&lt;p&gt;For more project specific information please see the &lt;a href="http://projects.spring.io/spring-roo/"&gt;Spring Roo Project Page&lt;/a&gt; | or see Spring Roo on &lt;a href="https://github.com/spring-projects/spring-roo"&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;As always, you'll also find Roo on Twitter - either follow &lt;a href="https://www.twitter.com/springroo"&gt;@SpringRoo&lt;/a&gt; or just include #SpringRoo in your tweets.&lt;/p&gt;
&lt;p&gt;Stay tuned to Spring Roo news!&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Reactor 2.0.0.RC1 with native Reactive Streams support now available!</title>
    <link rel="alternate" href="https://spring.io/blog/2015/02/18/reactor-2-0-0-rc1-with-native-reactive-streams-support-now-available" />
    <category term="releases" label="Releases" />
    <author>
      <name>Jon Brisbin</name>
    </author>
    <id>tag:spring.io,2015-02-16:1977</id>
    <updated>2015-02-18T15:53:00Z</updated>
    <content type="html">&lt;p&gt;The Reactor team is happy to announce the release of 2.0.0.RC1, which is now available in &lt;a href="http://repo.spring.io/libs-milestone/io/projectreactor/"&gt;the spring.io Maven repository&lt;/a&gt; as well as &lt;a href="http://search.maven.org/#search%7Cga%7C1%7Cio.projectreactor"&gt;Maven central&lt;/a&gt;. Version 2.0 is an &lt;code&gt;#uberupdate&lt;/code&gt; from Reactor version 1.1 and contains several new components as well as complete rewrites of important classes like &lt;code&gt;Stream&lt;/code&gt;, which now implements &lt;a href="http://github.com/reactive-streams/reactive-streams"&gt;the Reactive Streams standard&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Please note that the Maven coordinates for Reactor 2.0 have changed from those for Reactor 1.x. The new coordinates all fall under the group ID &lt;code&gt;io.projectreactor&lt;/code&gt; rather than the previous &lt;code&gt;org.projectreactor&lt;/code&gt;. A sample dependencies block for a Gradle project might look like this:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint groovy"&gt;ext {&#xD;
  reactorVersion = &amp;#39;2.0.0.RC1&amp;#39;&#xD;
}&#xD;
&#xD;
repositories {&#xD;
  maven { url &amp;#39;http://repo.spring.io/libs-milestone&amp;#39; }&#xD;
  mavenCentral()&#xD;
}&#xD;
&#xD;
compile &amp;quot;io.projectreactor:reactor-core:$reactorVersion&amp;quot;,&#xD;
    &amp;quot;io.projectreactor:reactor-net:$reactorVersion&amp;quot;,&#xD;
    &amp;quot;io.projectreactor.spring:reactor-spring-context:$reactorVersion&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h3&gt;&lt;a href="#what-is-reactor" class="anchor" name="what-is-reactor"&gt;&lt;/a&gt;What is Reactor?&lt;/h3&gt;&lt;p&gt;If you&amp;rsquo;re a complete newbie to Reactor, you might want to first jump over to the spiffy new website at &lt;a href="http://projectreactor.io"&gt;http://projectreactor.io&lt;/a&gt; and get acquainted with it before some of this will make sense.&lt;/p&gt;&lt;h3&gt;&lt;a href="#changelog-tl-dr" class="anchor" name="changelog-tl-dr"&gt;&lt;/a&gt;Changelog TL;DR&lt;/h3&gt;&lt;p&gt;Along with &lt;a href="https://spring.io/blog/2014/10/21/reactor-2-0-0-m1-released-with-reactive-streams-integration"&gt;the changes announced in the 2.0.0.M1 release&lt;/a&gt;, here’s a brief list of important changes over version 1.1:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;Stream&lt;/code&gt; has been rewritten to implement the Reactive Streams standard, is 5-10x faster, and has much less overhead than the previous version.&lt;/li&gt;
  &lt;li&gt;Upgrading from Reactor 1.x code is not hard, with just a few changes to existing code being required to accommodate the new signatures of &lt;code&gt;Stream&lt;/code&gt; and the renaming of &lt;code&gt;Reactor&lt;/code&gt; to &lt;code&gt;EventBus&lt;/code&gt;. Documentation around this transition is ongoing.&lt;/li&gt;
  &lt;li&gt;Reactor’s &lt;code&gt;Stream&lt;/code&gt; API derives from &lt;a href="https://msdn.microsoft.com/en-gb/data/gg577609.aspx"&gt;Reactive Extensions&lt;/a&gt; and mirrors many of its naming conventions. By leveraging a common vocabulary and behavior, it’s possible to easily translate Rx.NET and RxJava examples to Reactor.&lt;/li&gt;
  &lt;li&gt;Reactor’s API has been harmonized around static helper methods and factories to make embedding as easy as possible.&lt;/li&gt;
  &lt;li&gt;TCP support is totally jacked: Reactive Streams backpressure, HTTP server and client, &lt;code&gt;Stream&lt;/code&gt; integration, DSL helper methods.&lt;/li&gt;
  &lt;li&gt;&lt;a href="http://projectreactor.io/"&gt;A new website&lt;/a&gt; with the beginnings of a proper reference manual, more samples, and more javadoc.&lt;/li&gt;
  &lt;li&gt;Community contributions from more than just core project committers.&lt;/li&gt;
&lt;/ul&gt;&lt;h3&gt;&lt;a href="#reactive-streams-is-totally-boss" class="anchor" name="reactive-streams-is-totally-boss"&gt;&lt;/a&gt;Reactive Streams is totally Boss&lt;/h3&gt;&lt;p&gt;If we had to limit ourselves to talking about just one change, then the native and foundational support for Reactive Streams would be it. It’s hard to overstate just how fundamental Reactive Streams has become to Reactor. Stream processing is the &lt;a href="https://typesafe.com/company/news"&gt;new&lt;/a&gt; &lt;a href="https://twitter.com/search?q=stream%20processing"&gt;black&lt;/a&gt; and Reactor has embraced that from the beginning of the project. The addition of Reactive Streams and its propagation of backpressure support, however, makes processing large volumes of data in real or near-real time much more accessible to your cloud applications. Now patterns such as &lt;code&gt;stop-read&lt;/code&gt; under load, &lt;code&gt;batch flush&lt;/code&gt; or &lt;code&gt;adaptive batch&lt;/code&gt; are available out of the box.&lt;/p&gt;&lt;p&gt;Each step in a Reactor &lt;code&gt;Stream&lt;/code&gt; is a Reactive Streams component that correctly propagates demand and backpressure based on the rate of processing under the current resource constraints. Using Reactive Streams, Reactor 2.0 makes it possible to create a stream of processing that adjusts its resource usage automatically. You can influence the rate at which new items are pulled into the system because of the way Reactive Streams backpressure is communicated upstream. That means a slow downstream component can push back all the way to the source to slow down the ingest rate if current processing is using all available resources.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;Pool&amp;lt;Connection&amp;gt; pool;&#xD;
Stream&amp;lt;Message&amp;gt; input;&#xD;
&#xD;
input.capacity(1)&#xD;
     .batchConsume(msg -&amp;gt; {&#xD;
       pool.getConnection().merge(msg);&#xD;
     }, requestMore -&amp;gt; Math.max(pool.getSize() - pool.getActive(), 1));
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the snippet above we’re adapting the number of items to process based on the number of available connections in the pool. The &lt;code&gt;Consumer&lt;/code&gt; passed as the first parameter to the &lt;code&gt;batchConsume&lt;/code&gt; method will be invoked governed by the &lt;code&gt;requestMore&lt;/code&gt; value returned from the &lt;code&gt;Function&lt;/code&gt; passed as the second parameter. In this case we’re going to pre-fetch a number of messages equal to the number of free connections in the pool, or just a single message if all connections are active (in that case we’ll rely on backpressure from the connection pool).&lt;/p&gt;&lt;p&gt;If we wanted to make sure our stream was not a resource hog, we could also change the capacity algorithm to return a number less than the number of available connections, which would leave some connections available to other components in our application.&lt;/p&gt;&lt;h3&gt;&lt;a href="#reactor-is-now-android-friendly" class="anchor" name="reactor-is-now-android-friendly"&gt;&lt;/a&gt;Reactor is now Android-friendly&lt;/h3&gt;&lt;p&gt;Starting with Reactor 2.0.0.RC1, it’s possible to include Reactor in your Android application by simply excluding the &lt;code&gt;gs-collections&lt;/code&gt; library which would otherwise force you to jump through some hoops due to it’s size. We’ve implemented a &lt;code&gt;SimpleCachingRegistry&lt;/code&gt; for the &lt;code&gt;EventBus&lt;/code&gt; that doesn’t use &lt;code&gt;gs-collections&lt;/code&gt;. Future improvements could include a dedicated UI event loop &lt;code&gt;Dispatcher&lt;/code&gt; to make sure your event handlers are run on the correct thread. &lt;/p&gt;&lt;p&gt;We’re very interested to see how Reactor can facilitate reactive applications on Android devices and how that ties to Reactor’s extremely high volume, low latency capabilities on the server side. Please let us know if you’re using Reactor on Android and if there are things we can do to make that experience better.&lt;/p&gt;&lt;h3&gt;&lt;a href="#http-and-better-tcp-and-zeromq-support" class="anchor" name="http-and-better-tcp-and-zeromq-support"&gt;&lt;/a&gt;HTTP and Better TCP and ZeroMQ support&lt;/h3&gt;&lt;p&gt;RC1 introduces new support for HTTP based on Reactor’s use of Netty 4. It’s not comprehensive yet, but it provides a few helper methods and some useful abstractions for building (and accessing) non-blocking REST-based micro and nanoservices. I wouldn&amp;rsquo;t be trying to build production services with it yet, as there&amp;rsquo;s still some refining that needs to happen before GA. You can embed a microservice using Reactor without resorting to the Netty API directly. &lt;/p&gt;&lt;p&gt;The following creates a Netty-based embedded HTTP server with path parameters that dispatches tasks onto the shared &lt;code&gt;RingBufferDispatcher&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;HttpServer&amp;lt;String, String&amp;gt; server = NetStreams.httpServer(&#xD;
  spec -&amp;gt; spec.listen(3000)&#xD;
              .codec(StandardCodecs.STRING_CODEC)&#xD;
              .dispatcher(Environment.sharedDispatcher())&#xD;
);&#xD;
&#xD;
server.get(&amp;quot;/echo/{greeting}&amp;quot;, ch -&amp;gt; {&#xD;
  String greeting = ch.param(&amp;quot;greeting&amp;quot;) + &amp;quot; World!&amp;quot;;&#xD;
&#xD;
  ch.transfer(Transfer.NON_CHUNKED)&#xD;
    .responseHeader(&amp;quot;Content-Length&amp;quot;, &amp;quot;&amp;quot; + greeting.length())&#xD;
    .log(&amp;quot;server&amp;quot;);&#xD;
&#xD;
  return Streams.just(greeting);&#xD;
});&#xD;
&#xD;
server.start();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;We’ve also updated the TCP and ZeroMQ support to make better use of the important changes we made to &lt;code&gt;Stream&lt;/code&gt;. Most importantly, TCP servers and clients make use of Reactive Streams backpressure support to implement patterns like &amp;lsquo;stop-read&amp;rsquo; to keep the server from overflowing downstream processing by reading too much data from the client, before there are resources available to process it.&lt;/p&gt;&lt;h3&gt;&lt;a href="#the-road-to-ga" class="anchor" name="the-road-to-ga"&gt;&lt;/a&gt;The Road to GA&lt;/h3&gt;&lt;p&gt;We’ll do at least one more RC before releasing Reactor 2.0 GA. There’s still a few tweaks we need to make around complicated fork/join dispatching before we’re happy with its predictability. There are likely some additions to the HTTP support that we’ll want to make since this first cut is a fairly simple set of features. We might come across a few more bugs in edge cases as well. &lt;/p&gt;&lt;p&gt;We feel pretty good about this release candidate and we encourage you to try it out. If you’re doing new development, then we definitely encourage you to build on the Reactive Streams foundation of Reactor 2.0 versus the less capable, pre-Reactive Streams version in 1.1. If you’re upgrading existing Reactor code, the path is actually quite easy. In almost all cases your code will be greatly simplified. &lt;/p&gt;&lt;h3&gt;&lt;a href="#getting-support" class="anchor" name="getting-support"&gt;&lt;/a&gt;Getting Support&lt;/h3&gt;&lt;p&gt;If you run into problems upgrading your code, or just have general questions about how to use Reactor to solve your fast data problems, don’t hesitate to ask on the &lt;a href="https://groups.google.com/forum/#!forum/reactor-framework"&gt;Reactor Framework Google Group&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;We also welcome community contributions via &lt;a href="https://github.com/reactor/reactor/pulls"&gt;pull requests on GitHub&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;You might also be interested to know that the Reactive Streams project is being considered for inclusion in JDK 9 in the form of a new &lt;code&gt;java.util.concurrent.Flow&lt;/code&gt; class and appropraite inner classes. The discussion on this topic is being held in the &lt;a href="http://g.oswego.edu/dl/concurrency-interest/"&gt;JSR-166 concurrency-interest&lt;/a&gt; mailling list managed by professor &lt;a href="http://gee.cs.oswego.edu/dl/"&gt;Doug Lea&lt;/a&gt; of the State University of New York at Oswego.&lt;/p&gt;&lt;h3&gt;&lt;a href="#getting-the-code" class="anchor" name="getting-the-code"&gt;&lt;/a&gt;Getting the Code&lt;/h3&gt;&lt;p&gt;Reactor is Apache 2.0 licensed and the project is managed through GitHub:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Reactor (core, groovy, net)&lt;/strong&gt;: &lt;a href="https://github.com/reactor/reactor"&gt;https://github.com/reactor/reactor&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Reactor Spring&lt;/strong&gt;: &lt;a href="https://github.com/reactor/reactor-spring"&gt;https://github.com/reactor/reactor-spring&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>This Week in Spring - February 17th, 2015</title>
    <link rel="alternate" href="https://spring.io/blog/2015/02/17/this-week-in-spring-february-17th-2015" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Josh Long</name>
    </author>
    <id>tag:spring.io,2015-02-18:1981</id>
    <updated>2015-02-17T23:55:00Z</updated>
    <content type="html">&lt;p&gt;Welcome to another installment of &lt;em&gt;This Week in Spring&lt;/em&gt;! This week I&amp;rsquo;ve been in studio recording the next iteration of the Spring Livelessons series, this one on building cloud-native applications (microservices) with Spring Boot, Spring Cloud, and Cloud Foundry. It&amp;rsquo;s been a lot of fun, and - this morning - I took a break to do two 1.5 hour webinars for O&amp;rsquo;Reilly on building Spring Boot applications and Spring Cloud microservices, both entirely live coded! It&amp;rsquo;s been a fun week for me, and I hope it has for you, as well. &lt;/p&gt;&lt;p&gt;This Thursday the 19th marks the culmination of this year&amp;rsquo;s &lt;em&gt;Lunar New Year&lt;/em&gt;, or &lt;a href="http://en.wikipedia.org/wiki/Chinese_New_Year"&gt;&lt;em&gt;Chinese new year&lt;/em&gt;&lt;/a&gt; or &lt;strong&gt;&lt;em&gt;Spring festival&lt;/em&gt;&lt;/strong&gt;. What&amp;rsquo;s this to do with Spring (the technology)? Not much, besides being a celebration of better things to come and a great name! So happy new year (新年快乐) to readers all around the world!&lt;/p&gt;&lt;p&gt;Anyway, without further ado, let&amp;rsquo;s get to it!&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;The good Dr. Mark Pollack just &lt;a href="http://spring.io/blog/2015/02/12/spring-xd-1-1-ga-and-1-0-4-released"&gt;announced Spring XD 1.1&lt;/a&gt;! The new release is &lt;em&gt;incredible&lt;/em&gt;: stream processing based on Reactor, RxJava, and Spark; Sqoop and Spark batch jobs (in addition to Spring Batch and Hadoop); Python processor modules; a Java configuration model for custom processor modules; integration with a myriad backends, including Kafka, and &lt;em&gt;much&lt;/em&gt; more! Get the bits, get your data processing pipelines done faster and more reliably, and get home in time to celebrate!&lt;/li&gt;
  &lt;li&gt;The good Dr. Dave Syer just announced &lt;a href="http://spring.io/blog/2015/02/13/spring-cloud-1-0-0-rc3-available-now"&gt;Spring Cloud 1.0.0.RC3 is now available&lt;/a&gt;! This is &lt;em&gt;hopefully&lt;/em&gt; the last milestone before 1.0.0, so be sure to get the bits and try it out!&lt;/li&gt;
  &lt;li&gt;Spring XD ninja Sabby Anandan put together a nice post &lt;a href="http://spring.io/blog/2015/02/12/spring-xd-data-driven-connectivity-within-a-unified-platform"&gt;looking at some of the &lt;em&gt;many&lt;/em&gt; new features in Spring XD 1.1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Spring ninja Stephane Nicoll put together a nice post that &lt;a href="http://spring.io/blog/2015/02/11/better-application-events-in-spring-framework-4-2"&gt;looks at the new events support in Spring framework 4.2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Benjamin Winterberg put together a lovely piece on building Isomorphic (JavaScript views rendered on both the client and the server with React.js) &lt;a href="http://winterbe.com/posts/2015/02/16/isomorphic-react-webapps-on-the-jvm/"&gt;applications with Spring Boot and Nashorn&lt;/a&gt;! This is so cool!&lt;/li&gt;
  &lt;li&gt;Spring (and Spring Boot) make it super simple to put together a headless processing application - you know, one that doesn&amp;rsquo;t have an HTTP endpoint? So, naturally, &lt;a href="https://github.com/rburgst/spring-boot-initscript"&gt;I smiled when I saw this Spring Boot &lt;code&gt;init.d&lt;/code&gt; script&lt;/a&gt;!&lt;/li&gt;
  &lt;li&gt;This Do-It-Yourself example of &lt;a href="http://blog.codeleak.pl/2015/02/openshift-diy-build-spring-boot.html"&gt;running Spring Boot on OpenShift is interesting&lt;/a&gt;. OpenShift has a concept of cartridges. I think - but am not 100% sure - that they provide map logically to the concept of buildpacks on Cloud Foundry and Heroku. Except, apparently, the DIY cartridge can&amp;rsquo;t be scaled up.. so this isn&amp;rsquo;t exactly recommended for any sort of real use.&lt;/li&gt;
  &lt;li&gt;Our pal Dan Woods put together another &lt;a href="http://www.infoq.com/articles/boot-microservices"&gt;stellar look at Spring Boot for microservices for InfoQ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;The amazing &lt;a href="http://twitter.com/bdussault"&gt;Brian Dussault&lt;/a&gt; put together &lt;a href="http://spring.io/blog/2015/02/11/java-doesn-t-suck-rockin-the-jvm"&gt;a nice follow-up post&lt;/a&gt; to our pal [James Wards&amp;rsquo; post, &lt;a href="http://www.jamesward.com/2014/12/03/java-doesnt-suck-youre-just-using-it-wrong"&gt;&lt;em&gt;Java Doesn&amp;rsquo;t Suck, You&amp;rsquo;re Just Doing it Wrong&lt;/em&gt;&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Check out this replay to Andy Wilkinson&amp;rsquo;s talk, &lt;a href="http://spring.io/blog/2015/02/10/webinar-replay-documenting-rest-ful-apis"&gt;&lt;em&gt;Documenting REST APIs&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Want to learn more about the Spring Integration Java configuration DSL (that was rhetorical! Of course you do!), then check out &lt;a href="http://spring.io/blog/2015/02/10/webinar-replay-introducing-the-java-dsl-for-spring-integration"&gt;the replay of Gary Russell&amp;rsquo;s awesome webinar on the subject&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Speaking of Dan Woods, check out the replay &lt;a href="http://spring.io/blog/2015/02/10/springone2gx-2014-replay-ratpack-web-framework"&gt;of his SpringOne2GX 2014 talk introducing RatPack&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Groovy-language ninja Cédric Champeau&amp;rsquo;s SpringOne2GX 2014 talk, &lt;a href="http://spring.io/blog/2015/02/10/springone2gx-2014-replay-rethinking-api-design-with-traits"&gt;&lt;em&gt;Rethinking API Design with Traits&lt;/em&gt;&lt;/a&gt; is available!&lt;/li&gt;
  &lt;li&gt;Kenneth Kousen&amp;rsquo;s SpringOne2GX 2014 talk introducing the various &lt;a href="http://spring.io/blog/2015/02/10/springone2gx-2014-replay-testing-grails"&gt;approaches to unit-testing in Grails is now available online&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Ryan Vanderwerf&amp;rsquo;s SpringOne2GX 2014 talk introducing &lt;a href="http://spring.io/blog/2015/02/10/springone2gx-2014-replay-web-clustering-integration-with-terracotta-bigmemory-quartz-grails"&gt;web clustering with Terracotta and Grails is now available online&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Peter Niederwieser&amp;rsquo;s SpringOne2GX 2014 talk, &lt;a href="http://spring.io/blog/2015/02/10/springone2gx-2014-replay-building-a-continuous-delivery-pipeline-with-gradle-and-jenkins"&gt;&lt;em&gt;Building a Continuous Delivery Pipeline with Gradle and Jenkins&lt;/em&gt;, is now available&lt;/a&gt;!&lt;/li&gt;
  &lt;li&gt;Colin Harrington&amp;rsquo;s SpringOne2GX 2014 talk on securing &lt;a href="http://spring.io/blog/2015/02/10/springone2gx-2014-replay-securing-your-grails-app-beyond-authentication-authorization"&gt;Grails apps is now available&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Also, &lt;a href="http://thenextweb.com/insider/2015/02/18/http2-first-major-update-http-sixteen-years-finalized/"&gt;HTTP 2 is final&lt;/a&gt;!&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2014 Replay: "Bootiful" Applications with Spring Boot</title>
    <link rel="alternate" href="https://spring.io/blog/2015/02/17/springone2gx-2014-replay-bootiful-applications-with-spring-boot" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-02-18:1980</id>
    <updated>2015-02-17T22:57:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2014. &lt;/p&gt;
&lt;p&gt;Speaker: Josh Long, Phil Webb&lt;/p&gt;
&lt;p&gt; Slides: &lt;a href="http://www.slideshare.net/SpringCentral/bootiful"&gt;http://www.slideshare.net/SpringCentral/bootiful&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Core Spring Track &lt;/p&gt;
&lt;p&gt;Alright, so maybe &amp;quot;bootiful&amp;quot; won't ever work, but we tried, and it was worth it too because you're reading this. Spring Boot, the new convention-over-configuration centric framework from the Spring team at Pivotal, marries Spring's flexibility with conventional, common sense defaults to make application development not just fly, but pleasant! Join Spring developer advocate Josh Long and Spring Boot co-lead Phillip Webb for a look at what Spring Boot is, why it's turning heads, why you should consider it for your next application (REST, web, batch, big-data, integration, whatever!) and how to get started.&lt;/p&gt;
&lt;p&gt;&#xD;
  &lt;iframe width="560" height="315" src="https://www.youtube.com/embed/HCyYEVRZISk" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&#xD;
&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2014 Replay: Testing with Spring Framework 4.x</title>
    <link rel="alternate" href="https://spring.io/blog/2015/02/17/springone2gx-2014-replay-testing-with-spring-framework-4-x" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-02-18:1979</id>
    <updated>2015-02-17T22:47:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2014. &lt;/p&gt;
&lt;p&gt;Speaker: Sam Brannen, Swiftmind &lt;/p&gt;
&lt;p&gt;Core Spring Track &lt;/p&gt;
&lt;p&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/testing-with-spring-framework-4x"&gt;http://www.slideshare.net/SpringCentral/testing-with-spring-framework-4x&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The Spring Framework has undergone a lot of innovation in the 4.0 and 4.1 releases, and so has its testing support. Join Spring Test component lead Sam Brannen in this talk to discover what's new in Spring's testing support in 4.0 through 4.1. This talk will provide attendees an overview of what's been deprecated, what's changed, and what's been introduced in Spring's testing support over the last two years, with real life examples and tips for best practices. Highlights include using SocketUtils to scan for free TCP &amp;amp; UDP server ports, the ActiveProfilesResolver API, meta-annotation support for test annotations including attribute overrides, best practices with TestNG, using Groovy scripts to configure an ApplicationContext for integration tests, improvements to SQL script execution and embedded databases, the new TestContext framework bootstrap strategy, programmatic transaction management in tests, and more.&lt;/p&gt;
&lt;p&gt;&#xD;
  &lt;iframe width="560" height="315" src="https://www.youtube.com/embed/5tgkxGEvK4U" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&#xD;
&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2014 Replay: Reactive Oriented Architecture with Grails</title>
    <link rel="alternate" href="https://spring.io/blog/2015/02/17/springone2gx-2014-replay-reactive-oriented-architecture-with-grails" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-02-18:1978</id>
    <updated>2015-02-17T22:46:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2014. &lt;/p&gt;
&lt;p&gt;Speaker: Steve Pember &lt;/p&gt;
&lt;p&gt;G&amp;amp;G Special Topics &lt;/p&gt;
&lt;p&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/reactive-grails"&gt;http://www.slideshare.net/SpringCentral/reactive-grails&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;The natural tendency for application developers is to construct their code in a procedural, synchronous, monolithic pattern. Veteran developers know that this leads to error prone, unscalable, slow software - yet it is alarmingly prevalent. There have been several architectural patterns that have risen over the years which have attempted to mitigate this problem. One of the most popular has been Service Oriented Architecture, which involves breaking the monolithic application into a distributed system of several smaller services. In this talk, I argue that SOA is a decent start, but not nearly good enough. I will discuss the tenants of the Reactive Pattern and the importance of moving away from Monolithic to Reactive architectures. We will discuss the various Groovy-friendly technologies that allow us to build distributed, micro-service based applications and cover effective communication strategies between each service. We will see how being Reactive is the only viable architecture for large, efficient, scalable systems. If Reactive is new to you, this should be an excellent introduction.&lt;/p&gt;
&lt;p&gt;&#xD;
  &lt;iframe width="560" height="315" src="https://www.youtube.com/embed/wUxbb6X0Kgs" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&#xD;
&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Spring Cloud 1.0.0.RC3 Available Now</title>
    <link rel="alternate" href="https://spring.io/blog/2015/02/13/spring-cloud-1-0-0-rc3-available-now" />
    <category term="releases" label="Releases" />
    <author>
      <name>Dave Syer</name>
    </author>
    <id>tag:spring.io,2015-02-13:1976</id>
    <updated>2015-02-13T15:53:00Z</updated>
    <content type="html">&lt;p&gt;Spring Cloud 1.0.0.RC3 is available now from &lt;a href="https://repo.spring.io/libs-milestone-local"&gt;https://repo.spring.io/libs-milestone-local&lt;/a&gt;. This is (hopefully) the last milestone release before 1.0.0. There were some bug fixes since 1.0.0.RC2 and also a few small new features:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Refactored the Feign support to look a bit more like Spring Data (so &lt;code&gt;@EnableFeignClients&lt;/code&gt; instead of &lt;code&gt;@FeignClientScan&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;Support for multipart/form-data in the Zuul proxy&lt;/li&gt;
  &lt;li&gt;Support for including and excluding remote services in the automatic route registration in Zuul&lt;/li&gt;
  &lt;li&gt;Support for declarative Ribbon retry in Zuul&lt;/li&gt;
  &lt;li&gt;Cleaned up of a lot of dependencies. If you use the spring-cloud-starters you should get a nice consistent experience of adding and subtracting features. Gradle users need to use the &lt;a href="https://github.com/spring-gradle-plugins/dependency-management-plugin"&gt;dependency management plugin&lt;/a&gt; for the same experience.&lt;/li&gt;
  &lt;li&gt;Added small, bite-sized &lt;a href="https://github.com/spring-cloud-samples/tests"&gt;sample projects&lt;/a&gt; for integration testing of classpath isolation issues.&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Spring XD 1.1 GA and 1.0.4 released</title>
    <link rel="alternate" href="https://spring.io/blog/2015/02/12/spring-xd-1-1-ga-and-1-0-4-released" />
    <category term="releases" label="Releases" />
    <author>
      <name>Mark Pollack</name>
    </author>
    <id>tag:spring.io,2015-02-10:1969</id>
    <updated>2015-02-12T17:17:00Z</updated>
    <content type="html">&lt;p&gt;Six months after the 1.0 GA release, the team is happy to announce the availability of Spring XD 1.1 GA. &lt;/p&gt;&lt;p&gt;Download Links:&lt;br/&gt;* 1.1.0.RELEASE: &lt;a href="http://repo.spring.io/release/org/springframework/xd/spring-xd/1.1.0.RELEASE/spring-xd-1.1.0.RELEASE-dist.zip"&gt;zip&lt;/a&gt;, &lt;a href="https://github.com/spring-projects/spring-xd/wiki/Getting-Started#osx-homebrew-installation"&gt;homebrew&lt;/a&gt;, &lt;a href="https://github.com/spring-projects/spring-xd/wiki/Getting-Started#redhatcentos-installation"&gt;yum&lt;/a&gt;.&lt;br/&gt;* 1.0.4.RELEASE: &lt;a href="http://repo.spring.io/libs-milestone/org/springframework/xd/spring-xd/1.0.4.RELEASE/spring-xd-1.0.4.RELEASE-dist.zip"&gt;zip&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Please read &lt;a href="https://spring.io/blog/2015/02/12/spring-xd-data-driven-connectivity-within-a-unified-platform"&gt;Sabby Anandan&amp;rsquo;s blog&lt;/a&gt; for a general overview of Spring XD. Specific to 1.1, a ton of features have been added. Here are some that will give you the most bang for your big data buck.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Stream Processing with &lt;a href="https://github.com/spring-projects/spring-xd/wiki/Creating-a-Data-Stream-Processor-Module#reactor-streams"&gt;Reactor&lt;/a&gt;, &lt;a href="https://github.com/spring-projects/spring-xd/wiki/Creating-a-Data-Stream-Processor-Module#rxjava-streams"&gt;RxJava&lt;/a&gt;, &lt;a href="https://github.com/spring-projects/spring-xd/wiki/Creating-a-Data-Stream-Processor-Module#spark-streaming"&gt;Spark Streaming&lt;/a&gt; and &lt;a href="https://github.com/spring-projects/spring-xd/wiki/Creating-a-Python-Module"&gt;Python&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Orchestrate &lt;a href="https://github.com/spring-projects/spring-xd/wiki/Batch-Jobs#running-spark-application-as-a-batch-job-sparkapp"&gt;Spark&lt;/a&gt; and &lt;a href="https://github.com/spring-projects/spring-xd/wiki/Batch-Jobs#running-sqoop-as-a-batch-job-sqoop"&gt;Sqoop&lt;/a&gt; Batch Jobs&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-projects/spring-xd/wiki/Application-Configuration#kafka"&gt;Kafka&lt;/a&gt; based message bus, &lt;a href="https://github.com/spring-projects/spring-xd/wiki/Sources#kafka"&gt;source&lt;/a&gt; and &lt;a href="https://github.com/spring-projects/spring-xd/wiki/Sinks#kafka-sink"&gt;sink&lt;/a&gt; along with &lt;a href="https://spring.io/blog/2015/02/09/spring-integration-kafka-extension-1-0-ga-is-available"&gt;new general purpose high level Kafka APIs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-projects/spring-xd/wiki/Application-Configuration#rabbitmq"&gt;Batching and compression for RabbitMQ&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Easily develop, &lt;a href="https://github.com/spring-projects/spring-xd/wiki/Creating-a-Processor-Module#write-a-test"&gt;test&lt;/a&gt;, and &lt;a href="https://github.com/spring-projects/spring-xd/wiki/Creating-a-Processor-Module#register-the-module"&gt;package custom modules&lt;/a&gt; and &lt;a href="https://github.com/spring-projects/spring-xd/wiki/Creating-a-Processor-Module#register-the-module"&gt;upload&lt;/a&gt; them to the admin server.&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-projects/spring-xd/wiki/Running-on-YARN#working-with-container-groups"&gt;Containers group management when running XD on YARN&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://github.com/spring-projects/spring-xd/wiki/Application-Configuration#customizing-authorization"&gt;Role based authorization of REST endpoints&lt;/a&gt; and &lt;a href="https://github.com/spring-projects/spring-xd/wiki/Application-Configuration#ldap-authentication"&gt;LDAP&lt;/a&gt;/&lt;a href="https://github.com/spring-projects/spring-xd/wiki/Application-Configuration#file-based-authentication"&gt;file&lt;/a&gt; based authentication&lt;/li&gt;
  &lt;li&gt;Support for Pivotal, Hortonworks, and Cloudera Hadoop distributions.&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;There are &lt;a href="https://github.com/spring-projects/spring-xd-samples"&gt;two dozen sample applications available&lt;/a&gt;, so check them out.&lt;/p&gt;&lt;p&gt;As a sneak peek of things to come, Andy Clement and his team are working on an amazing UI for authoring and monitoring XD Streams. Here is a screen shot based on the &lt;a href="https://github.com/spring-projects/spring-xd-samples/tree/master/analytics-dashboard"&gt;analytics-dashboard application&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/markpollack/spring-xd-images/master/spring-xd-flo.png" alt="Flo""/&gt;&lt;/p&gt;&lt;p&gt;Stay tuned!&lt;/p&gt;&lt;p&gt;Feedback is very important, so please keep in touch with questions and comments via&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href="http://stackoverflow.com/questions/tagged/spring-xd"&gt;StackOverflow&lt;/a&gt; &lt;code&gt;spring-xd&lt;/code&gt; tag&lt;/li&gt;
  &lt;li&gt;&lt;a href="https://jira.spring.io/browse/XD/?selectedTab=com.atlassian.jira.jira-projects-plugin:summary-panel"&gt;Spring JIRA&lt;/a&gt; or &lt;a href="https://github.com/spring-projects/spring-xd/issues"&gt;GitHub Issues&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
  </entry>
  <entry>
    <title>Spring XD: Data-Driven Connectivity Within a Unified Platform</title>
    <link rel="alternate" href="https://spring.io/blog/2015/02/12/spring-xd-data-driven-connectivity-within-a-unified-platform" />
    <category term="releases" label="Releases" />
    <author>
      <name>Sabby Anandan</name>
    </author>
    <id>tag:spring.io,2015-02-12:1975</id>
    <updated>2015-02-12T08:16:00Z</updated>
    <content type="html">&lt;p&gt;Whether you’re at home, office, or in-transit, connectivity is the norm. It’s a part of daily life that we’ve all come to &lt;a href="http://www.forbes.com/sites/timworstall/2015/01/24/eric-schmidts-quite-right-the-internet-will-disappear-all-technologies-do-as-they-mature/"&gt;expect and depend on&lt;/a&gt;. Connectivity between people and information is all about the movement and analysis of data: data delivers insights, and these insights must increasingly deliver immediate results to users. This level of always-on, always-available connectedness presents numerous challenges. The type of data, formats, and volume is dynamic, as are the data-producing agents.&lt;/p&gt;&lt;p&gt;Spring XD addresses these numerous challenges within a unified platform. Whether through continuous data streams or schedule-based data movements, Spring XD provides end-to-end data pipeline capabilities to consume, process, analyze, and stage data where and how you need it.&lt;/p&gt;&lt;p&gt;With the 1.1 GA release, Spring XD adapts to functional stream processing by adding support for project &lt;a href="http://projectreactor.io/"&gt;Reactor&lt;/a&gt;, &lt;a href="https://github.com/ReactiveX/RxJava"&gt;RxJava&lt;/a&gt;, and &lt;a href="https://spark.apache.org/streaming/"&gt;Spark Streaming&lt;/a&gt;. We added support for &lt;a href="https://github.com/spring-projects/spring-xd/wiki/Batch-Jobs#running-sqoop-as-a-batch-job-sqoop"&gt;Sqoop&lt;/a&gt; and &lt;a href="https://github.com/spring-projects/spring-xd/wiki/Batch-Jobs#running-spark-application-as-a-batch-job-sparkapp"&gt;Spark&lt;/a&gt; batch jobs, in addition to current Spring Batch, and Hadoop based jobs (MR/Hive/Pig). Recognizing the importance of Python in Big Data applications, we also added Python processor and sink modules to integrate with a Spring XD stream. This enables users to choose the right tool for the use case, enabling them to take advantage of native APIs to build complex data processing pipelines.&lt;/p&gt;&lt;p&gt;Unlike other stream processing frameworks, Spring XD’s DSL (Domain Specific Language) eliminates coding requirements. Forget about setting up projects, IDE, build scripts or bundling, and use the &lt;a href="https://github.com/spring-projects/spring-xd/wiki/ShellReference"&gt;high-level configuration DSL&lt;/a&gt; instead. The Spring XD team continues focus on developer productivity that has brought numerous developer-friendly add-ons and &lt;a href="https://github.com/spring-projects/spring-xd-samples"&gt;samples&lt;/a&gt; to the platform. A stream, which is a chain of processing-units in the pipeline, can be orchestrated through the DSL. The built-in Admin UI can be used to remotely monitor and manage the streams, batch jobs, and the cluster. &lt;/p&gt;&lt;p&gt;Spring XD 1.1 GA offers thousands of combinations of data pipelines that can be built out of the box, with no coding required. Unlike other stream processing frameworks, this feature is backed by the enterprise-trusted Spring Integration project, which is recognized as an emerging standard and the &lt;a href="https://spring.io/blog/2014/11/12/pivotal-recognized-in-dzone-s-2014-guide-to-enterprise-integration"&gt;market share leader&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;At its core, Spring XD is built for easy extension support. The 1.1 GA release adds a fresh approach to developing and contributing custom modules. Thanks to Spring Boot’s module packaging plugin, you now have the option to choose between Maven or Gradle to bundle your custom module. By including the dependencies required for a custom module, you can deploy the packaged uber-jar via a REST-API. This does not require you to bring the runtime down, nor do you have to worry about currently running pipelines. The REST-API simplifies the contribution as the installed custom module is immediately available and ready for use.&lt;/p&gt;&lt;p&gt;Due to its pluggable architecture, Spring XD continues to integrate with frameworks to simplify Big Data application development. With this latest release, you can consume from Kafka topics (&lt;a href="https://github.com/spring-projects/spring-xd/wiki/Sources#kafka"&gt;source-adapter&lt;/a&gt;) or write to Kafka topics (&lt;a href="https://github.com/spring-projects/spring-xd/wiki/Sinks#kafka-sink"&gt;sink-adapter&lt;/a&gt;) and also plug into Kafka as a message bus. This allows Spring XD to handle the orchestration, enabling you to focus on the business logic.&lt;/p&gt;&lt;p&gt;With our fresh take on a new &lt;a href="https://github.com/spring-projects/spring-integration-kafka"&gt;Kafka Client API&lt;/a&gt;, users can now choose from new options such as partitioning at the stream level, controlling offsets, batching, and reliable data reprocessing.&lt;/p&gt;&lt;p&gt;The 1.1 GA release also integrates with Spark, a top-level Apache project. By using the out-of-the-box Spark as a &lt;a href="https://github.com/spring-projects/spring-xd/wiki/Batch-Jobs#running-spark-application-as-a-batch-job-sparkapp"&gt;batch job&lt;/a&gt;, or Spark Streaming as &lt;a href="https://github.com/spring-projects/spring-xd/wiki/Batch-Jobs#running-spark-application-as-a-batch-job-sparkapp"&gt;processor module&lt;/a&gt;, you can create data pipelines using the native Spark APIs. This is a familiar development experience for someone who’s already using Spark. At the same time, anyone new to Spark can immediately take advantage of dozens of input and output adapters, using a modular and distributed fault-tolerant runtime, and focus solely on business requirements instead. To address single point of failures, Spring XD provides added value by restarting the Spark Streaming driver to recover from fault scenarios.&lt;/p&gt;&lt;p&gt;With the release of Spring XD 1.1 GA, there’s no reason developing Big Data applications has to be time-consuming and complicated. Our goal with Spring XD is to eliminate the barrier between application development and big data, and shorten the turnaround from data ingestion to insights, thereby enabling truly data-driven applications. In future releases, we will continue to improve developer productivity, while retaining Spring XD’s core as an open and extensible runtime.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Better application events in Spring Framework 4.2</title>
    <link rel="alternate" href="https://spring.io/blog/2015/02/11/better-application-events-in-spring-framework-4-2" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Stéphane Nicoll</name>
    </author>
    <id>tag:spring.io,2015-02-09:1965</id>
    <updated>2015-02-11T14:29:00Z</updated>
    <content type="html">&lt;p&gt;Application events are available since the &lt;em&gt;very&lt;/em&gt; beginning of the Spring framework as a mean for loosely coupled components to exchange information. One of the most well known usage of application events is the following:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@Component&#xD;
public class MyListener &#xD;
        implements ApplicationListener&amp;lt;ContextRefreshedEvent&amp;gt; {&#xD;
  &#xD;
    public void onApplicationEvent(ContextRefreshedEvent event) {&#xD;
        ...&#xD;
    }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This allows &lt;code&gt;MyListener&lt;/code&gt; to be notified when the context has &lt;em&gt;refreshed&lt;/em&gt; and one can use that to run arbitrary code when the application context has fully started.&lt;/p&gt;&lt;p&gt;In Spring Framework 4.2 we have revisited the event infrastructure in three main areas that I am going to explain in this post.&lt;/p&gt;&lt;h2&gt;&lt;a href="#generics-support" class="anchor" name="generics-support"&gt;&lt;/a&gt;Generics support&lt;/h2&gt;&lt;p&gt;It is now possible to define your &lt;code&gt;ApplicationListener&lt;/code&gt; implementation with nested generics information in the event type, something like:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;public class MyListener &#xD;
        implements ApplicationListener&amp;lt;MyEvent&amp;lt;Order&amp;gt;&amp;gt; { ... }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;When dispatching an event, the signature of your listener is used to determine if it matches said incoming event.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Due to type erasure you need to publish an event that resolves the generics parameter you would filter on, something like &lt;code&gt;MyOrderEvent extends MyEvent&amp;lt;Order&amp;gt;&lt;/code&gt;. There might be other workarounds and we are happy to revisit the signature matching algorithm if the community thinks it worthwhile.&lt;/p&gt;
&lt;/blockquote&gt;&lt;h2&gt;&lt;a href="#annotation-driven-event-listener" class="anchor" name="annotation-driven-event-listener"&gt;&lt;/a&gt;Annotation-driven event listener&lt;/h2&gt;&lt;p&gt;The biggest new feature is the support of annotation-driven event listeners, similar to our recent work on &lt;a href="https://spring.io/blog/2014/04/30/spring-4-1-s-upcoming-jms-improvements"&gt;JMS and AMQP endpoints&lt;/a&gt; in Spring Framework 4.1. In a nutshell, it is now possible to simply annotate a method of a managed-bean with &lt;code&gt;@EventListener&lt;/code&gt; to automatically register an &lt;code&gt;ApplicationListener&lt;/code&gt; matching the signature of the method. Our example above can be rewritten as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@Component&#xD;
public class MyListener {&#xD;
  &#xD;
    @EventListener&#xD;
    public void handleContextRefresh(ContextRefreshedEvent event) {&#xD;
        ...&#xD;
    }&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;@EventListener&lt;/code&gt; is a core annotation that is handled transparently in a similar fashion as &lt;code&gt;@Autowired&lt;/code&gt; and others: no extra configuration is necessary with java config and the existing &lt;code&gt;&amp;lt;context:annotation-driven/&amp;gt;&lt;/code&gt; element enables full support for it.&lt;/p&gt;&lt;p&gt;The method signature defines the event type that you&amp;rsquo;re interested in. It is also possible to define a SpEL expression that should match in order to handle the event. For instance, consider the following event:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;public class OrderCreatedEvent implements CreationEvent&amp;lt;Order&amp;gt; { ... }&#xD;
&#xD;
    private boolean awesome;&#xD;
   &#xD;
    public boolean isAwesome() { return this.awesome; }&#xD;
    ....&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The following example showcases an event listener that will only be invoked for an &lt;em&gt;awesome&lt;/em&gt; &lt;code&gt;CreationEvent&lt;/code&gt; of &lt;code&gt;Order&lt;/code&gt; (i.e. if the &lt;code&gt;awesome&lt;/code&gt; flag is &lt;code&gt;true&lt;/code&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@Component&#xD;
public class MyComponent {&#xD;
  &#xD;
  @EventListener(condition = &amp;quot;#creationEvent.awesome&amp;quot;)&#xD;
  public void handleOrderCreatedEvent(CreationEvent&amp;lt;Order&amp;gt; creationEvent) {&#xD;
    ... &#xD;
  }&#xD;
&#xD;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;&lt;p&gt;As you can see from the sample above, method arguments are exposed via their names if such information can be discovered. The condition expression also exposes a &amp;ldquo;root&amp;rdquo; variable with the &lt;em&gt;raw&lt;/em&gt; &lt;code&gt;ApplicationEvent&lt;/code&gt; (&lt;code&gt;#root.event&lt;/code&gt;) and the actual method arguments (&lt;code&gt;#root.args&lt;/code&gt;).&lt;/p&gt;
&lt;/blockquote&gt;&lt;h2&gt;&lt;a href="#publishing-events" class="anchor" name="publishing-events"&gt;&lt;/a&gt;Publishing events&lt;/h2&gt;&lt;p&gt;You can define a non-&lt;code&gt;void&lt;/code&gt; return type for any method annotated with &lt;code&gt;@EventListener&lt;/code&gt;. If you return a non &lt;code&gt;null&lt;/code&gt; value as the result of the processing of a particular event, we&amp;rsquo;ll send that result as a new event for you.&lt;/p&gt;&lt;p&gt;You may have noticed that our &lt;code&gt;OrderCreatedEvent&lt;/code&gt; does not extend from &lt;code&gt;ApplicationEvent&lt;/code&gt;; we felt it was about time to give you the flexibility to publish any arbitrary event and not force you to extend from &lt;code&gt;ApplicationEvent&lt;/code&gt;. The &lt;code&gt;ApplicationEventPublisher&lt;/code&gt; interface has been extended to allow you to publish any object; when said object isn&amp;rsquo;t an &lt;code&gt;ApplicationEvent&lt;/code&gt;, we wrap it in a &lt;code&gt;PayloadApplicationEvent&lt;/code&gt; for you. Remember this if you want to listen to such arbitrary event using a regular &lt;code&gt;ApplicationListener&lt;/code&gt; implementation.&lt;/p&gt;&lt;p&gt;The following sample shows how you can use &lt;code&gt;ApplicationEventPublisher&lt;/code&gt; to send an &lt;code&gt;OrderCreatedEvent&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@Component&#xD;
public class MyComponent {&#xD;
&#xD;
    private final ApplicationEventPublisher publisher;&#xD;
    &#xD;
    @Autowired&#xD;
    public MyComponent(ApplicationEventPublisher publisher) { ... }&#xD;
    &#xD;
    public void createOrder(Order order) {&#xD;
        // ....&#xD;
        this.publisher.publishEvent(new OrderCreatedEvent(order)); &#xD;
    }&#xD;
&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a href="#transaction-bound-events" class="anchor" name="transaction-bound-events"&gt;&lt;/a&gt;Transaction bound events&lt;/h2&gt;&lt;p&gt;Another popular improvement is the ability to bind the listener of an event to a phase of the transaction. The typical example is to handle the event when the transaction has completed successfully: this allows events to be used with more flexibility when the outcome of the current transaction actually matters to the listener.&lt;/p&gt;&lt;p&gt;Spring Framework is currently structured in such a way that the context is not aware of the transaction support and we obviously didn&amp;rsquo;t want to deviate from that very sane principle so we built an open infrastructure to allow additional components to be registered and influence the way event listeners are created.&lt;/p&gt;&lt;p&gt;The transaction module implements an &lt;code&gt;EventListenerFactory&lt;/code&gt; that looks for the new &lt;code&gt;@TransactionalEventListener&lt;/code&gt; annotation. When this one is present, an extended event listener that is aware of the transaction is registered instead of the default.&lt;/p&gt;&lt;p&gt;Let&amp;rsquo;s reuse our example above and rewrite it in such a way that the order creation event will only be processed when the transaction in which the producer is running has completed successfully:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@Component&#xD;
public class MyComponent {&#xD;
  &#xD;
  @TransactionalEventListener(condition = &amp;quot;#creationEvent.awesome&amp;quot;)&#xD;
  public void handleOrderCreatedEvent(CreationEvent&amp;lt;Order&amp;gt; creationEvent) { &#xD;
    ...&#xD;
  }&#xD;
&#xD;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Not much to see, right? &lt;code&gt;@TransactionalEventListener&lt;/code&gt; &lt;em&gt;is&lt;/em&gt; a regular &lt;code&gt;@EventListener&lt;/code&gt; and also exposes a &lt;code&gt;TransactionPhase&lt;/code&gt;, the default being &lt;code&gt;AFTER_COMMIT&lt;/code&gt;. You can also hook other phases of the transaction (&lt;code&gt;BEFORE_COMMIT&lt;/code&gt;, &lt;code&gt;AFTER_ROLLBACK&lt;/code&gt; and &lt;code&gt;AFTER_COMPLETION&lt;/code&gt; that is just an alias for &lt;code&gt;AFTER_COMMIT&lt;/code&gt; and &lt;code&gt;AFTER_ROLLBACK&lt;/code&gt;).&lt;/p&gt;&lt;p&gt;By default, if no transaction is running the event isn&amp;rsquo;t sent at all as we can&amp;rsquo;t obviously honor the requested phase, but there is a &lt;code&gt;fallbackExecution&lt;/code&gt; attribute in &lt;code&gt;@TransactionalEventListener&lt;/code&gt; that tells Spring to invoke the listener immediately if there is no transaction.&lt;/p&gt;&lt;h2&gt;&lt;a href="#try-it-out" class="anchor" name="try-it-out"&gt;&lt;/a&gt;Try it out!&lt;/h2&gt;&lt;p&gt;If you want to give this a try before the first milestone release of 4.2, grab a nightly SNAPSHOT build via our &lt;a href="https://repo.spring.io/snapshot/"&gt;snapshot repository&lt;/a&gt;. You can also create a sample project using &lt;a href="https://start.spring.io"&gt;start.spring.io&lt;/a&gt; using the latest Spring Boot snapshot build, or if you&amp;rsquo;re super lazy you can copy/paste this in your shell:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;$ curl https://start.spring.io/starter.tgz -d artifactId=events-demo \&#xD;
    -d baseDir=events-demo -d bootVersion=1.2.2.BUILD-SNAPSHOT | tar -xzvf -
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And update the project to use Spring Framework &lt;code&gt;4.2.0.BUILD-SNAPSHOT&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint xml"&gt;&amp;lt;properties&amp;gt;&#xD;
  ...&#xD;
  &amp;lt;spring.version&amp;gt;4.2.0.BUILD-SNAPSHOT&amp;lt;/spring.version&amp;gt;&#xD;
&amp;lt;/properties&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As always, we welcome community feedback, please try these features and let us know if you run into any issue.&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Java Doesn’t Suck - Rockin' the JVM</title>
    <link rel="alternate" href="https://spring.io/blog/2015/02/11/java-doesn-t-suck-rockin-the-jvm" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Brian Dussault</name>
    </author>
    <id>tag:spring.io,2015-01-28:1947</id>
    <updated>2015-02-11T14:27:00Z</updated>
    <content type="html">&lt;p&gt;Recently James Ward wrote a great blog post, &lt;a href="http://www.jamesward.com/2014/12/03/java-doesnt-suck-youre-just-using-it-wrong"&gt;“Java Doesn’t Suck – You’re Just Using it Wrong”&lt;/a&gt;, which highlighted numerous challenges that enterprise Java developers face in their daily routines building Java applications. The good news is that breaking out of the development rut is much easier than you may think. Over the last few years, Spring has redefined how modern Java applications are built while dramatically improving development velocity. In this post, I’ll use James Ward’s blog post as a backdrop to explain how Spring helps developers rock the JVM (using Java) while tackling each of the issues James outlined.&lt;/p&gt;&lt;h2&gt;&lt;a href="#instant-development-environment-setup-rocks" class="anchor" name="instant-development-environment-setup-rocks"&gt;&lt;/a&gt;Instant Development Environment Setup Rocks&lt;/h2&gt;&lt;p&gt;In James’ blog, he asserts “10 Page Wikis to Setup Dev Environments Suck”. We have all created these wiki pages at some point in our career and slogged through trying to keep them updated. These wikis have long been a source of frustration for new team members as they are often littered with outdated information. The good news is that Spring Boot’s build support makes automating this process quite easy.&lt;/p&gt;&lt;p&gt;Getting started with an existing application is a simple as cloning the source repository and running the application. Spring Boot provides support for Java’s most popular build tools, Maven and Gradle. Getting a fully functional application running with your favorite build tool is a simple as:&lt;/p&gt;&lt;p&gt;Maven example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;mvn spring-boot:run&#xD;

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Gradle example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;gradle bootRun&#xD;

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Since a Spring Boot application is a self-contained workload that combines application code, server, and 3rd party dependencies into a single build and deployment unit (executable .jar file), development teams are ensured a straightforward, repeatable development experience regardless of the IDE. Developers are freed from laborious environment setup instructions and can focus on building great applications. Running a Spring Boot application outside the build can be accomplished by executing:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;java -jar target/my-application-1.0.1-SNAPSHOT.jar&#xD;

&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;&lt;p&gt;Tip: Want to try this on your own? Follow along in one of the many &lt;a href="https://spring.io/guides"&gt;Getting Started Guides&lt;/a&gt; on spring.io. For developers new to Spring Boot, a great starting point is the &lt;a href="https://spring.io/guides/gs/spring-boot/"&gt;Building an Application with Spring Boot&lt;/a&gt; guide.&lt;/p&gt;
&lt;/blockquote&gt;&lt;h2&gt;&lt;a href="#congruent-deployment-environments-rock" class="anchor" name="congruent-deployment-environments-rock"&gt;&lt;/a&gt;Congruent Deployment Environments Rock&lt;/h2&gt;&lt;p&gt;The next challenge James Ward highlights is “to minimize risk when promoting builds from dev to staging to production, the only thing that should change between each environment is configuration”. Manually modifying deployment artifacts is a recipe for disaster and will eventually cause deployment delays or failures. Environment specific configuration should be externalized, ensuring that the same code tested in development is the “gold copy” that will make its way to production. This is the only cost-effective way to prove that what you tested is what you deployed! &lt;/p&gt;&lt;p&gt;Spring Boot makes it a cinch to externalize your configuration using a very particular PropertySource order that is designed to allow sensible overriding of values. It’s often desirable to provide a default configuration within your project for local development but override these values when promoting the code through environments. Spring Boot provides comprehensive support for externalized configuration via command line arguments, JNDI attributes, Java System properties, OS environment variables, configuration files, profile-driven configuration variants, and &lt;a href="http://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html"&gt;more&lt;/a&gt;. Spring Boot’s support of environment variables makes following &lt;a href="http://spring.io/blog/2015/01/13/configuring-it-all-out-or-12-factor-app-style-configuration-with-spring"&gt;Twelve-Factor application configuration best practices&lt;/a&gt; (strict separation of code from configuration) a breeze.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Tip 1: When using cloud platforms like Cloud Foundry, Spring Boot applications can leverage &lt;a href="http://cloud.spring.io/spring-cloud-connectors/"&gt;Spring Cloud Connectors&lt;/a&gt; to automatically bind to Cloud Foundry services like database and messaging systems. This has the advantage of reducing the number of environment-specific configuration properties that an application need to maintain, significantly reducing the risk of error when promoting code across environments.&lt;/p&gt;&lt;p&gt;Tip 2: Curious why Twelve-Factor applications matter? Check out this blog post, &lt;a href="https://spring.io/blog/2015/01/30/why-12-factor-application-patterns-microservices-and-cloudfoundry-matter"&gt;Why 12 Factor Application Patterns, Microservices and CloudFoundry Matter&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;&lt;h2&gt;&lt;a href="#fast-server-startup-rocks" class="anchor" name="fast-server-startup-rocks"&gt;&lt;/a&gt;Fast Server Startup Rocks&lt;/h2&gt;&lt;p&gt;Spring Boot provides support for lightweight, embeddable containers/servers that start-up quickly. A simple REST application can start-up in as little as 3 seconds. As of Spring Boot 1.2, there is embedded application server support for Tomcat (default container), Jetty, and Undertow. Not only does Spring Boot provide support for the leading lightweight containers, but it keeps the developer in full control of these decisions by making it straightforward to swap out the default. &lt;/p&gt;&lt;p&gt;The following Gradle build configuration enables support for full-stack web development, including support for embedded Tomcat and spring-webmvc.&lt;/p&gt;&lt;p&gt;Gradle example:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint groovy"&gt;...&#xD;
&#xD;
apply plugin: &amp;#39;java&amp;#39;&#xD;
&#xD;
repositories { jcenter() }&#xD;
dependencies {&#xD;
    compile(&amp;quot;org.springframework.boot:spring-boot-starter-web:1.2.0.RELEASE&amp;quot;)&#xD;
}&#xD;
&#xD;
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;As James Ward points out in his original blog post, startup times can be further improved by breaking monolithic deployments into microservices. Later in this post, the topic of microservices will be addressed in further detail (see the section titled &lt;em&gt;Microservice Style Architectures Rock&lt;/em&gt;).&lt;/p&gt;&lt;h2&gt;&lt;a href="#managed-dependencies-rock" class="anchor" name="managed-dependencies-rock"&gt;&lt;/a&gt;Managed Dependencies Rock&lt;/h2&gt;&lt;p&gt;Modern developers need tools and technology that allow them to get started quickly with the least amount of friction. They also demand modular, lightweight and opinionated technology to optimize productivity. Spring Boot takes aim at the very issue of getting up and running quickly while dramatically improving development velocity. &lt;/p&gt;&lt;p&gt;As James Ward correctly points out “it sucks if any of your library dependencies aren’t managed by a build tool”. Spring Boot makes this best practice a first practice by not only supporting modern build technologies but also providing convenient dependency descriptors called &lt;a href="http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using-boot-starter-poms"&gt;starter POMS&lt;/a&gt;. Starter POMs provide groups of dependencies for common development workloads that you can simply include in your application. &lt;/p&gt;&lt;p&gt;To get started with Spring Boot, you can point your browser at Spring Initializer - &lt;a href="http://start.spring.io"&gt;http://start.spring.io&lt;/a&gt;. Spring Initializer provides a web based interface allowing developers to select an application/workload and relevant dependencies. It will then generate a starter application with build support (supports Maven POM, Maven project, Gradle Config, Gradle project).&lt;/p&gt;&lt;p&gt;Screenshot of Spring Initializer:&lt;br/&gt;&lt;img src="https://raw.githubusercontent.com/dussab/blog-images/master/spring-intializer.png" alt="Spring Initializer""/&gt;&lt;/p&gt;&lt;p&gt;For developer that prefer the command line, you can install the Spring Boot CLI by issuing:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint bash"&gt;curl http://start.spring.io/install.sh | sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A new project can be initialized using the command line simply by issuing the following command:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint bash"&gt;spring init --dependencies=web,data-jpa my-project&#xD;

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The result of this initialization (via Spring Initializer or the Boot CLI) is a fully operational application where the required dependencies have been included and auto-configured by Spring Boot. &lt;/p&gt;&lt;p&gt;The &lt;a href="http://docs.spring.io/platform/docs/current/reference/htmlsingle/"&gt;Spring IO Platform&lt;/a&gt; (which includes Spring Boot) also provides a superset of the dependencies managed by Spring Boot’s starter POMs. Spring IO level-sets dependency versions across the Spring portfolio and has a longer release cycle than Spring Boot, giving enterprises a snapshot of dependency versions that are tested and known to work together. The Spring IO Platform distribution is not a monolithic download of libraries, and developers are free to choose only the parts they need in their application. The Spring IO Platform distribution contains versions of Spring modules, testing libraries, logging frameworks, database management, SQL/No-SQL, and so much more. The Spring IO distribution is ideal for enterprises that want to consume the Spring IO Platform dependencies at a more gradual cadence.&lt;/p&gt;&lt;p&gt;The following Gradle configuration demonstrates how to configure the Spring IO Platform bill-of-materials and leverage Spring Boot’s web starter POM:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint groovy"&gt;&lt;br/&gt;buildscript {&#xD;
    repositories {&#xD;
        jcenter()&#xD;
    }&#xD;
    dependencies {&#xD;
        classpath &amp;#39;io.spring.gradle:dependency-management-plugin:0.3.0.RELEASE&amp;#39;&#xD;
    }&#xD;
}&#xD;
&#xD;
apply plugin: &amp;#39;io.spring.dependency-management&amp;#39;&#xD;
&#xD;
repositories {&#xD;
    mavenCentral()&#xD;
}&#xD;
&#xD;
dependencyManagement {&#xD;
    imports {&#xD;
        mavenBom &amp;#39;io.spring.platform:platform-bom:1.1.0.RELEASE&amp;#39;&#xD;
    }&#xD;
}&#xD;
&#xD;
dependencies {&#xD;
    compile &amp;#39;org.springframework.boot:spring-boot-starter-web&amp;#39;&#xD;
}&#xD;

&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;&lt;a href="#short-development-validation-cycles-really-rock" class="anchor" name="short-development-validation-cycles-really-rock"&gt;&lt;/a&gt;Short Development / Validation Cycles Really Rock&lt;/h2&gt;&lt;p&gt;Most modern applications are being built with rich user interfaces communicating to back end services. Building applications in this manner has the benefit of strong separation of concerns between the UI and server side logic. Most modern IDEs provide dynamic reloading of static resources, allowing developers to see changes without restarting the server.&lt;/p&gt;&lt;p&gt;Spring Boot also supports server side templating technologies such as Thymeleaf, Freemarker, and Groovy. Spring Boot allows the dynamic reloading of these template technologies without incurring a server restart. For Thymeleaf this is as simple as setting the following property in the application.properties file:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint"&gt;spring.thymeleaf.cache: false&#xD;

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;On the server side, breaking your monolithic applications into microservices will reduce the startup time of Spring Boot applications (which is already quite quick due to its use of lightweight embedded containers). Additionally, Spring Boot delivers support for the autoconfiguration of testing utilities. Enabling Boot’s testing autoconfiguration is as effortless as including the spring-boot-starter-test starter POM. This enables Spring Test, JUnit, Hamcrest, and Mockito dependencies making it easy to incorporate Test Driven Development (TDD) into daily workflows. TDD enables developers to receive immediate feedback on changes to their code.&lt;/p&gt;&lt;p&gt;Finally, JRebel provides comprehensive support for class reloading with support for over 80 Java frameworks (including Spring). Check out the webinar &lt;a href="https://www.youtube.com/watch?v=N5FHiONGOsg"&gt;Spring Boot and JRebel 6&lt;/a&gt; with Josh Long and Adam Koblentz for more details.&lt;/p&gt;&lt;h2&gt;&lt;a href="#microservice-style-architectures-rock" class="anchor" name="microservice-style-architectures-rock"&gt;&lt;/a&gt;Microservice Style Architectures Rock&lt;/h2&gt;&lt;p&gt;James’ statement that “Monolithic Releases Suck“ is spot on for large or complex distributed systems. Most developers want to work in a more iterative manner (agile) and release more frequently. The microservice style architecture has grown in popularity as a way to combat the challenges of monolithic applications. For folks new to microservices, Martin Fowler provides a great description of this architecture style in his &lt;a href="http://martinfowler.com/articles/microservices.html"&gt;blog&lt;/a&gt;. &lt;/p&gt;&lt;p&gt;When building distributed applications (including microservice style applications), there are many common system patterns that appear. Spring Cloud makes it simple to adopt these patterns by providing out-of-the-box services to tackle the most common challenges. Spring Cloud implements patterns such as configuration management, service discovery, circuit breaker, intelligent routing, micro-proxy, and control bus. Spring Boot makes it drop dead simple to integrate these capabilities into your application.&lt;/p&gt;&lt;p&gt;For example, the Spring Cloud Netflix project makes standing up a service discovery service with Netflix’s Eureka as easy as: &lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;&lt;br/&gt;@SpringBootApplication &#xD;
@EnableEurekaServer&#xD;
&#xD;
public class Application {&#xD;
    public static void main(String[] args) {&#xD;
        new SpringApplicationBuilder(Application.class).web(true).run(args);&#xD;
    }&#xD;
&#xD;
}&#xD;

&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Client applications can register as a Eureka client by simply using @EnableEurekaClient:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;&lt;br/&gt;@SpringBootApplication&#xD;
@EnableEurekaClient&#xD;
@RestController&#xD;
public class Application {&#xD;
&#xD;
    @RequestMapping(&amp;quot;/&amp;quot;)&#xD;
    public String home() {&#xD;
        return &amp;quot;Hello world&amp;quot;;&#xD;
    }&#xD;
&#xD;
    public static void main(String[] args) {&#xD;
        new SpringApplicationBuilder(Application.class).web(true).run(args);&#xD;
    }&#xD;
&#xD;
}&#xD;

&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;&lt;p&gt;Tip 1: Spring Cloud provides support for numerous distributed processing patterns. To help you get started, check out the &lt;a href="https://github.com/spring-cloud-samples"&gt;Spring Cloud Samples&lt;/a&gt; github repository. Dave Syer and Spencer Gibb’s &lt;a href="http://www.infoq.com/presentations/spring-boot-netflix"&gt;Spring Cloud, Spring Boot and Netflix OSS&lt;/a&gt; SpringOne session is another great way to understand and learn how to operationalize microservice style architectures. &lt;/p&gt;&lt;p&gt;Tip 2: If you&amp;rsquo;re looking to build Hypermedia-style REST APIs, be sure to check out the Getting Started Guide, &lt;a href="https://spring.io/guides/gs/accessing-data-rest/"&gt;Accessing JPA Data with REST&lt;/a&gt;. &lt;a href="http://projects.spring.io/spring-data-rest/"&gt;Spring Data REST&lt;/a&gt; will help turbocharge your service development. Spring Data REST supports both SQL and No-SQL repositories.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Having technology that allows you to code microservices quickly is only half the battle. Developers are often plagued by the numerous delays in getting their code into production platforms. Some of the most common obstacles include manual deployments, testing, infrastructure provisioning, and service provisioning. Continuous delivery takes aim at automating the process of promoting code to production while minimizing risk. This allows organizations to make incremental changes to applications, making deployment a business decision rather than resource decision. This is quite a large topic on it’s own, but I highly recommend Matt Stine’s talk, &lt;a href="https://www.youtube.com/watch?v=iMvCOEsSuAc"&gt;Developing Microservices for PaaS with Spring and Cloud Foundry&lt;/a&gt; which does an excellent job highlighting the benefits of combining agile engineering practices with the automation of Pivotal Cloud Foundry. &lt;/p&gt;&lt;h2&gt;&lt;a href="#stateless-applications-rock" class="anchor" name="stateless-applications-rock"&gt;&lt;/a&gt;Stateless Applications Rock&lt;/h2&gt;&lt;p&gt;James points out that “sticky sessions and server state are usually one of the best ways to kill your performance and resilience. Session state (in the traditional Servlet sense) makes it really hard to do Continuous Delivery and scale horizontally”. &lt;/p&gt;&lt;p&gt;Removing session state from your application can dramatically streamline operations, allowing applications to be redeployed, terminated or scaled without the fear of losing session data. There are valid use cases for maintaining state, such as sharing authentication state, but this state should be persisted outside of the application (typically in a high-performance repository like a NoSQL, distributed cache, or even in-memory data store). Externalizing application state doesn’t have to be an onerous effort and Spring Session provides the common infrastructure to make this process simple and portable. Spring Session provides:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Support for clustering in a vendor neutral way&lt;/li&gt;
  &lt;li&gt;RESTful API support - supports session ids in headers&lt;/li&gt;
  &lt;li&gt;Pluggable strategy for determining the session id&lt;/li&gt;
  &lt;li&gt;Support to keep the HttpSession alive when a WebSocket is active&lt;/li&gt;
  &lt;li&gt;Support for Redis and Hazelcast backed session stores&lt;/li&gt;
  &lt;li&gt;Ability to manage multiple simultaneous sessions within a single browser (i.e. similar to multiple Google Accounts support)&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Configuring Spring Session with Redis is as simple as:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;@EnableRedisHttpSession&#xD;
public class Config {&#xD;
&#xD;
    @Bean&#xD;
    public JedisConnectionFactory connectionFactory() {&#xD;
        return new JedisConnectionFactory();&#xD;
    }&#xD;
}&#xD;

&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;&lt;p&gt;Tip: Spring Session 1.0 recently &lt;a href="http://spring.io/blog/2015/01/08/spring-session-1-0-0-release"&gt;went GA&lt;/a&gt;, so try out the &lt;a href="http://docs.spring.io/spring-session/docs/current/reference/html5/#samples"&gt;Spring Session samples&lt;/a&gt; to see it all in action. Dave Syer recently published a blog post titled, &lt;a href="https://spring.io/blog/2015/01/28/the-api-gateway-pattern-angular-js-and-spring-security-part-iv"&gt;The API Gateway Pattern: Angular JS and Spring Security Part IV&lt;/a&gt;, which details the shared authentication state use case. Highly recommended reading!&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Finally, if you’re using Pivotal Cloud Foundry, the Cloud Foundry Java build pack provides another option to easily externalize state through an autoconfigured CF session state store. Check out this &lt;a href="https://github.com/cloudfoundry/java-buildpack/blob/master/docs/container-tomcat.md#session-replication"&gt;blog post&lt;/a&gt; for details.&lt;/p&gt;&lt;h2&gt;&lt;a href="#non-blocking-apps-rock" class="anchor" name="non-blocking-apps-rock"&gt;&lt;/a&gt;Non-Blocking Apps Rock&lt;/h2&gt;&lt;p&gt;A number of modern application architectures can greatly benefit from asynchronous and non-blocking processing of requests. These use cases can include composing multiple backend service calls and WebSocket style applications. &lt;/p&gt;&lt;p&gt;Project Reactor (part of the Spring IO Platform) provides the foundation for building these async, non-blocking applications. In version 2.0, Reactor will provide a full implementation of the &lt;a href="http://www.reactive-streams.org/"&gt;Reactive Streams specification&lt;/a&gt; which opens up integration with other Reactive Streams implementations like &lt;a href="http://www.typesafe.com/activator/template/akka-stream-scala"&gt;Akka Streams&lt;/a&gt;, &lt;a href="http://ratpack.io/"&gt;Ratpack&lt;/a&gt;, &lt;a href="https://github.com/ReactiveX/RxJava"&gt;RxJava&lt;/a&gt;. &lt;/p&gt;&lt;p&gt;The following code snippet shows how to use the Reactive Streams API to create a stream, add business logic to it, then publish data into it:&lt;/p&gt;
&lt;pre&gt;&lt;code class="prettyprint java"&gt;// by default Streams use the Disruptor RingBufferDispatcher&#xD;
Broadcaster&amp;lt;String&amp;gt; helloStream = Streams.broadcast(env);&#xD;
&#xD;
helloStream.map(s -&amp;gt; &amp;quot;Hello &amp;quot; + s + &amp;quot;!&amp;quot;)&#xD;
           .consume(log::info);&#xD;
&#xD;
helloStream.onNext(&amp;quot;World&amp;quot;);&#xD;

&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;&lt;p&gt;Tip: Spring Boot provides support for project Reactor, making it simple to get started. Follow along in the &lt;a href="https://spring.io/guides/gs/messaging-reactor/"&gt;Creating an Asynchronous, Event-Driven Application with Reactor&lt;/a&gt; Getting Started Guide to create your first reactive application. Also be sure to check out the webinar, &lt;a href="https://spring.io/blog/2014/12/11/webinar-replay-using-reactor-for-asynch-non-blocking-microservices"&gt;Using Reactor for Asynch, non-blocking Microservices&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;&lt;p&gt;Spring Framework 4 introduced support for WebSocket-style, event-driven applications. This pragmatic approach goes well beyond JSR-356 and includes client-side fallback options with SockJS, support for messaging subprotocol (STOMP), security (Spring Security 4), message broker support, Reactor based MessageChannel for message passing, client disconnect handling and a familiar Spring programming model. &lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Tip: Spring Boot makes configuring WebSocket applications a snap. Follow along with the &lt;a href="https://spring.io/guides/gs/messaging-stomp-websocket/"&gt;Using WebSocket to build an interactive web application guide&lt;/a&gt; to get rolling.&lt;/p&gt;
&lt;/blockquote&gt;&lt;h2&gt;&lt;a href="#the-java-language-rocks" class="anchor" name="the-java-language-rocks"&gt;&lt;/a&gt;The Java Language Rocks&lt;/h2&gt;&lt;p&gt;Spring Boot provides developers an option of using Java 6, 7, 8 as well as Groovy to build next generation applications. In James’ post he states that the “Java Language Kinda Sucks” but with the release of Java 8, Java has been propelled forward and provides many powerful language features that will improve productivity. Some of the great Java 8 features include support for Lambda Expressions, Streams, and concurrency improvements. Spring Boot makes getting started with Java 8 or Groovy effortless.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;Tip: If you’re new to the features of Java 8, I highly recommend Venkat Subramaniam’s book, &lt;a href="https://pragprog.com/book/vsjava8/functional-programming-in-java"&gt;Functional Programming in Java: Harnessing the Power of Java 8 Lambda Expressions&lt;/a&gt; and his &lt;a href="http://spring.io/blog/2014/11/17/springone2gx-2014-replay-java-8-language-capabilities-what-s-in-it-for-you"&gt;SpringOne2GX 2014 talk&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;h2&gt;&lt;a href="#conclusion" class="anchor" name="conclusion"&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Building modern Java applications doesn’t have to be a painful experience. Spring Boot has taken the ceremony out of building applications, making Java fun again. Spring removes boilerplate from every layer of your application - business logic (Spring Foundation projects), configuration and runtime (Spring Boot), and distributed system patterns (Spring Cloud). The best way to get started is to dive into &lt;a href="http://spring.io/guides"&gt;Spring’s Getting Started Guides&lt;/a&gt; and deploy to &lt;a href="https://run.pivotal.io/"&gt;Pivotal Web Services&lt;/a&gt; (a public, hosted version of Cloud Foundry that is free for 60 days). &lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Webinar Replay: Documenting REST-ful APIs</title>
    <link rel="alternate" href="https://spring.io/blog/2015/02/10/webinar-replay-documenting-rest-ful-apis" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-02-10:1970</id>
    <updated>2015-02-10T22:53:00Z</updated>
    <content type="html">&lt;p&gt;Speaker: Andy Wilkinson &lt;/p&gt;
&lt;p&gt;An API's documentation is a vital part of making it easy to understand and easy to use. RESTful APIs are no different. In this webinar we'll look at what should be included in your RESTful API's documentation and, just as importantly, what should be omitted. To illustrate this we'll look at some real-world examples of good and bad API documentation.  We'll look at some of the problems and limitations of choosing a tool like Swagger to produce your API's documentation and conclude by looking at some alternatives that are better-suited to producing documentation that your users will love. &lt;/p&gt;
&lt;p&gt;Learn more about Spring MVC http://projects.spring.io/spring-framework &lt;/p&gt;
&lt;p&gt;Learn more about Spring REST Docs https://github.com/wilkinsona/spring-restdocs&lt;/p&gt;
&lt;p&gt; &lt;iframe width="420" height="315" src="https://www.youtube.com/embed/knH5ihPNiUs" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt; &lt;/p&gt;</content>
  </entry>
  <entry>
    <title>Webinar Replay: Introducing the Java DSL for Spring Integration</title>
    <link rel="alternate" href="https://spring.io/blog/2015/02/10/webinar-replay-introducing-the-java-dsl-for-spring-integration" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-02-10:1971</id>
    <updated>2015-02-10T22:51:00Z</updated>
    <content type="html">&lt;p&gt;Webinar: Introducing the Java DSL for Spring Integration&lt;br/&gt;&lt;p&gt;Speaker: Gary Russell &lt;/p&gt;&lt;br/&gt;&lt;p&gt;Slides: &lt;a href="https://speakerdeck.com/garyrussell/spring-integration-java-dsl-a-deeper-dive"&gt;&lt;a href="https://speakerdeck.com/garyrussell/spring-integration-java-dsl-a-deeper-dive"&gt;https://speakerdeck.com/garyrussell/spring-integration-java-dsl-a-deeper-dive&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;&lt;br/&gt;&lt;p&gt; The Spring Integration JavaConfig and DSL extension provides a set of convenient Builders and a fluent API to configure Spring Integration message flows from Spring @Configuration classes. The Java DSL for Spring Integration is essentially a facade for Spring Integration. The DSL provides a simple way to embed Spring Integration Message Flows into your application using the fluent Builder pattern together with existing Java and Annotation configurations from Spring Framework and Spring Integration as well. Another useful tool to simplify configuration is Java 8 Lambdas. &lt;/p&gt;&lt;br/&gt;&lt;p&gt;Learn more about Spring Integration: &lt;a href="http://projects.spring.io/spring-integration"&gt;&lt;a href="http://projects.spring.io/spring-integration"&gt;http://projects.spring.io/spring-integration&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;&lt;br/&gt;&lt;p&gt;Learn more about Spring XD: &lt;a href="http://projects.spring.io/spring-xd"&gt;&lt;a href="http://projects.spring.io/spring-xd"&gt;http://projects.spring.io/spring-xd&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;&lt;/p&gt;
&lt;p&gt; &lt;iframe width="420" height="315" src="https://www.youtube.com/embed/W3ayvcnpO1A" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt; &lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2014 Replay: Ratpack Web Framework</title>
    <link rel="alternate" href="https://spring.io/blog/2015/02/10/springone2gx-2014-replay-ratpack-web-framework" />
    <category term="engineering" label="Engineering" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-02-08:1960</id>
    <updated>2015-02-10T22:50:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2014. &lt;/p&gt;
&lt;p&gt;Speaker: Dan Woods, NetFlix &lt;/p&gt;
&lt;p&gt;G&amp;amp;G Special Topics &lt;/p&gt;
&lt;p&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/4pieter-springone2gx2014ratpack"&gt;http://www.slideshare.net/SpringCentral/4pieter-springone2gx2014ratpack&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Ratpack is an asynchronous web framework for the JVM that was inspired by the simplistic nature of Ruby's Sinatra framework. Written in Java, optimized for Groovy and Java 8, Ratpack sports a high throughput, simplistic interface for rapid development of rich, real-time web applications.&lt;/p&gt;
&lt;p&gt;&#xD;
  &lt;iframe width="560" height="315" src="https://www.youtube.com/embed/sYTmpd0CF4E" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&#xD;
&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2014 Replay: Rethinking API Design with Traits</title>
    <link rel="alternate" href="https://spring.io/blog/2015/02/10/springone2gx-2014-replay-rethinking-api-design-with-traits" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-02-08:1959</id>
    <updated>2015-02-10T22:48:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2014. &lt;/p&gt;
&lt;p&gt;Speaker: Cédric Champeau &lt;/p&gt;
&lt;p&gt;More Groovy Track &lt;/p&gt;
&lt;p&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/traits-design"&gt;http://www.slideshare.net/SpringCentral/traits-design&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;Groovy 2.3 introduces the concept of traits in the language. Traits look like interfaces, but allow the developer to add both implementation and state into it. It introduces multiple inheritance in the language while avoiding the diamond problem. Traits will let you rethink the way you design APIs in Groovy, by favoriting composition of behaviors.&lt;/p&gt;
&lt;p&gt;&#xD;
  &lt;iframe width="560" height="315" src="https://www.youtube.com/embed/wXACuXtI9Fs" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&#xD;
&lt;/p&gt;</content>
  </entry>
  <entry>
    <title>SpringOne2GX 2014 Replay: Testing Grails</title>
    <link rel="alternate" href="https://spring.io/blog/2015/02/10/springone2gx-2014-replay-testing-grails" />
    <category term="news" label="News and Events" />
    <author>
      <name>Pieter Humphrey</name>
    </author>
    <id>tag:spring.io,2015-02-08:1958</id>
    <updated>2015-02-10T22:42:00Z</updated>
    <content type="html">&lt;p&gt;Recorded at SpringOne2GX 2014. &lt;/p&gt;
&lt;p&gt;Speaker: Kenneth Kousen &lt;/p&gt;
&lt;p&gt;Essential Grails Track&lt;/p&gt;
&lt;p&gt;Slides: &lt;a href="http://www.slideshare.net/SpringCentral/testing-grails"&gt;http://www.slideshare.net/SpringCentral/testing-grails&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;Grails comes with extensive testing support, ranging from unit to integration to functional tests. This session will demonstrate the range of options available both natively and through testing plugins. Prerequisite: Some knowledge of Grails would be helpful but not assumed.&lt;/p&gt;
&lt;p&gt;&#xD;
  &lt;iframe width="560" height="315" src="https://www.youtube.com/embed/haPb8an89YU" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;&#xD;
&lt;/p&gt;</content>
  </entry>
</feed>

